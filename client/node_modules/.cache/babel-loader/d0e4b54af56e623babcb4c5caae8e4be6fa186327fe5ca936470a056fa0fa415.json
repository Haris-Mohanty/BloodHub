{"ast":null,"code":"import _slicedToArray from \"C:/wamp64/www/BloodHub/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"C:/wamp64/www/BloodHub/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"reactReduxForwardedRef\"];\n\n/* eslint-disable valid-jsdoc, @typescript-eslint/no-unused-vars */\nimport hoistStatics from 'hoist-non-react-statics';\nimport React, { useContext, useMemo, useRef } from 'react';\nimport { isValidElementType, isContextConsumer } from 'react-is';\nimport defaultSelectorFactory from '../connect/selectorFactory';\nimport { mapDispatchToPropsFactory } from '../connect/mapDispatchToProps';\nimport { mapStateToPropsFactory } from '../connect/mapStateToProps';\nimport { mergePropsFactory } from '../connect/mergeProps';\nimport { createSubscription } from '../utils/Subscription';\nimport { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect';\nimport shallowEqual from '../utils/shallowEqual';\nimport warning from '../utils/warning';\nimport { ReactReduxContext } from './Context';\nimport { notInitialized } from '../utils/useSyncExternalStore';\nvar useSyncExternalStore = notInitialized;\nexport var initializeConnect = function initializeConnect(fn) {\n  useSyncExternalStore = fn;\n}; // Define some constant arrays just to avoid re-creating these\n\nvar EMPTY_ARRAY = [null, 0];\nvar NO_SUBSCRIPTION_ARRAY = [null, null]; // Attempts to stringify whatever not-really-a-component value we were given\n// for logging in an error message\n\nvar stringifyComponent = function stringifyComponent(Comp) {\n  try {\n    return JSON.stringify(Comp);\n  } catch (err) {\n    return String(Comp);\n  }\n};\n\n// This is \"just\" a `useLayoutEffect`, but with two modifications:\n// - we need to fall back to `useEffect` in SSR to avoid annoying warnings\n// - we extract this to a separate function to avoid closing over values\n//   and causing memory leaks\nfunction useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {\n  useIsomorphicLayoutEffect(function () {\n    return effectFunc.apply(void 0, _toConsumableArray(effectArgs));\n  }, dependencies);\n} // Effect callback, extracted: assign the latest props values to refs for later usage\n\nfunction captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps,\n// actualChildProps: unknown,\nchildPropsFromStoreUpdate, notifyNestedSubs) {\n  // We want to capture the wrapper props and child props we used for later comparisons\n  lastWrapperProps.current = wrapperProps;\n  renderIsScheduled.current = false; // If the render was from a store update, clear out that reference and cascade the subscriber update\n\n  if (childPropsFromStoreUpdate.current) {\n    childPropsFromStoreUpdate.current = null;\n    notifyNestedSubs();\n  }\n} // Effect callback, extracted: subscribe to the Redux store or nearest connected ancestor,\n// check for updates after dispatched actions, and trigger re-renders.\n\nfunction subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, isMounted, childPropsFromStoreUpdate, notifyNestedSubs,\n// forceComponentUpdateDispatch: React.Dispatch<any>,\nadditionalSubscribeListener) {\n  // If we're not subscribed to the store, nothing to do here\n  if (!shouldHandleStateChanges) return function () {}; // Capture values for checking if and when this component unmounts\n\n  var didUnsubscribe = false;\n  var lastThrownError = null; // We'll run this callback every time a store subscription update propagates to this component\n\n  var checkForUpdates = function checkForUpdates() {\n    if (didUnsubscribe || !isMounted.current) {\n      // Don't run stale listeners.\n      // Redux doesn't guarantee unsubscriptions happen until next dispatch.\n      return;\n    } // TODO We're currently calling getState ourselves here, rather than letting `uSES` do it\n\n    var latestStoreState = store.getState();\n    var newChildProps, error;\n    try {\n      // Actually run the selector with the most recent store state and wrapper props\n      // to determine what the child props should be\n      newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);\n    } catch (e) {\n      error = e;\n      lastThrownError = e;\n    }\n    if (!error) {\n      lastThrownError = null;\n    } // If the child props haven't changed, nothing to do here - cascade the subscription update\n\n    if (newChildProps === lastChildProps.current) {\n      if (!renderIsScheduled.current) {\n        notifyNestedSubs();\n      }\n    } else {\n      // Save references to the new child props.  Note that we track the \"child props from store update\"\n      // as a ref instead of a useState/useReducer because we need a way to determine if that value has\n      // been processed.  If this went into useState/useReducer, we couldn't clear out the value without\n      // forcing another re-render, which we don't want.\n      lastChildProps.current = newChildProps;\n      childPropsFromStoreUpdate.current = newChildProps;\n      renderIsScheduled.current = true; // TODO This is hacky and not how `uSES` is meant to be used\n      // Trigger the React `useSyncExternalStore` subscriber\n\n      additionalSubscribeListener();\n    }\n  }; // Actually subscribe to the nearest connected ancestor (or store)\n\n  subscription.onStateChange = checkForUpdates;\n  subscription.trySubscribe(); // Pull data from the store after first render in case the store has\n  // changed since we began.\n\n  checkForUpdates();\n  var unsubscribeWrapper = function unsubscribeWrapper() {\n    didUnsubscribe = true;\n    subscription.tryUnsubscribe();\n    subscription.onStateChange = null;\n    if (lastThrownError) {\n      // It's possible that we caught an error due to a bad mapState function, but the\n      // parent re-rendered without this component and we're about to unmount.\n      // This shouldn't happen as long as we do top-down subscriptions correctly, but\n      // if we ever do those wrong, this throw will surface the error in our tests.\n      // In that case, throw the error from here so it doesn't get lost.\n      throw lastThrownError;\n    }\n  };\n  return unsubscribeWrapper;\n} // Reducer initial state creation for our update reducer\n\nvar initStateUpdates = function initStateUpdates() {\n  return EMPTY_ARRAY;\n};\nfunction strictEqual(a, b) {\n  return a === b;\n}\n/**\r\n * Infers the type of props that a connector will inject into a component.\r\n */\n\nvar hasWarnedAboutDeprecatedPureOption = false;\n/**\r\n * Connects a React component to a Redux store.\r\n *\r\n * - Without arguments, just wraps the component, without changing the behavior / props\r\n *\r\n * - If 2 params are passed (3rd param, mergeProps, is skipped), default behavior\r\n * is to override ownProps (as stated in the docs), so what remains is everything that's\r\n * not a state or dispatch prop\r\n *\r\n * - When 3rd param is passed, we don't know if ownProps propagate and whether they\r\n * should be valid component props, because it depends on mergeProps implementation.\r\n * As such, it is the user's responsibility to extend ownProps interface from state or\r\n * dispatch props or both when applicable\r\n *\r\n * @param mapStateToProps A function that extracts values from state\r\n * @param mapDispatchToProps Setup for dispatching actions\r\n * @param mergeProps Optional callback to merge state and dispatch props together\r\n * @param options Options for configuring the connection\r\n *\r\n */\n\nfunction connect(mapStateToProps, mapDispatchToProps, mergeProps) {\n  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n    pure = _ref.pure,\n    _ref$areStatesEqual = _ref.areStatesEqual,\n    areStatesEqual = _ref$areStatesEqual === void 0 ? strictEqual : _ref$areStatesEqual,\n    _ref$areOwnPropsEqual = _ref.areOwnPropsEqual,\n    areOwnPropsEqual = _ref$areOwnPropsEqual === void 0 ? shallowEqual : _ref$areOwnPropsEqual,\n    _ref$areStatePropsEqu = _ref.areStatePropsEqual,\n    areStatePropsEqual = _ref$areStatePropsEqu === void 0 ? shallowEqual : _ref$areStatePropsEqu,\n    _ref$areMergedPropsEq = _ref.areMergedPropsEqual,\n    areMergedPropsEqual = _ref$areMergedPropsEq === void 0 ? shallowEqual : _ref$areMergedPropsEq,\n    _ref$forwardRef = _ref.forwardRef,\n    forwardRef = _ref$forwardRef === void 0 ? false : _ref$forwardRef,\n    _ref$context = _ref.context,\n    context = _ref$context === void 0 ? ReactReduxContext : _ref$context;\n  if (process.env.NODE_ENV !== 'production') {\n    if (pure !== undefined && !hasWarnedAboutDeprecatedPureOption) {\n      hasWarnedAboutDeprecatedPureOption = true;\n      warning('The `pure` option has been removed. `connect` is now always a \"pure/memoized\" component');\n    }\n  }\n  var Context = context;\n  var initMapStateToProps = mapStateToPropsFactory(mapStateToProps);\n  var initMapDispatchToProps = mapDispatchToPropsFactory(mapDispatchToProps);\n  var initMergeProps = mergePropsFactory(mergeProps);\n  var shouldHandleStateChanges = Boolean(mapStateToProps);\n  var wrapWithConnect = function wrapWithConnect(WrappedComponent) {\n    if (process.env.NODE_ENV !== 'production' && !isValidElementType(WrappedComponent)) {\n      throw new Error(\"You must pass a component to the function returned by connect. Instead received \".concat(stringifyComponent(WrappedComponent)));\n    }\n    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';\n    var displayName = \"Connect(\".concat(wrappedComponentName, \")\");\n    var selectorFactoryOptions = {\n      shouldHandleStateChanges: shouldHandleStateChanges,\n      displayName: displayName,\n      wrappedComponentName: wrappedComponentName,\n      WrappedComponent: WrappedComponent,\n      // @ts-ignore\n      initMapStateToProps: initMapStateToProps,\n      // @ts-ignore\n      initMapDispatchToProps: initMapDispatchToProps,\n      initMergeProps: initMergeProps,\n      areStatesEqual: areStatesEqual,\n      areStatePropsEqual: areStatePropsEqual,\n      areOwnPropsEqual: areOwnPropsEqual,\n      areMergedPropsEqual: areMergedPropsEqual\n    };\n    function ConnectFunction(props) {\n      var _useMemo = useMemo(function () {\n          // Distinguish between actual \"data\" props that were passed to the wrapper component,\n          // and values needed to control behavior (forwarded refs, alternate context instances).\n          // To maintain the wrapperProps object reference, memoize this destructuring.\n          var reactReduxForwardedRef = props.reactReduxForwardedRef,\n            wrapperProps = _objectWithoutPropertiesLoose(props, _excluded);\n          return [props.context, reactReduxForwardedRef, wrapperProps];\n        }, [props]),\n        _useMemo2 = _slicedToArray(_useMemo, 3),\n        propsContext = _useMemo2[0],\n        reactReduxForwardedRef = _useMemo2[1],\n        wrapperProps = _useMemo2[2];\n      var ContextToUse = useMemo(function () {\n        // Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.\n        // Memoize the check that determines which context instance we should use.\n        return propsContext && propsContext.Consumer &&\n        // @ts-ignore\n        isContextConsumer( /*#__PURE__*/React.createElement(propsContext.Consumer, null)) ? propsContext : Context;\n      }, [propsContext, Context]); // Retrieve the store and ancestor subscription via context, if available\n\n      var contextValue = useContext(ContextToUse); // The store _must_ exist as either a prop or in context.\n      // We'll check to see if it _looks_ like a Redux store first.\n      // This allows us to pass through a `store` prop that is just a plain value.\n\n      var didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);\n      var didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);\n      if (process.env.NODE_ENV !== 'production' && !didStoreComeFromProps && !didStoreComeFromContext) {\n        throw new Error(\"Could not find \\\"store\\\" in the context of \" + \"\\\"\".concat(displayName, \"\\\". Either wrap the root component in a <Provider>, \") + \"or pass a custom React context provider to <Provider> and the corresponding \" + \"React context consumer to \".concat(displayName, \" in connect options.\"));\n      } // Based on the previous check, one of these must be true\n\n      var store = didStoreComeFromProps ? props.store : contextValue.store;\n      var getServerState = didStoreComeFromContext ? contextValue.getServerState : store.getState;\n      var childPropsSelector = useMemo(function () {\n        // The child props selector needs the store reference as an input.\n        // Re-create this selector whenever the store changes.\n        return defaultSelectorFactory(store.dispatch, selectorFactoryOptions);\n      }, [store]);\n      var _useMemo3 = useMemo(function () {\n          if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY; // This Subscription's source should match where store came from: props vs. context. A component\n          // connected to the store via props shouldn't use subscription from context, or vice versa.\n\n          var subscription = createSubscription(store, didStoreComeFromProps ? undefined : contextValue.subscription); // `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in\n          // the middle of the notification loop, where `subscription` will then be null. This can\n          // probably be avoided if Subscription's listeners logic is changed to not call listeners\n          // that have been unsubscribed in the  middle of the notification loop.\n\n          var notifyNestedSubs = subscription.notifyNestedSubs.bind(subscription);\n          return [subscription, notifyNestedSubs];\n        }, [store, didStoreComeFromProps, contextValue]),\n        _useMemo4 = _slicedToArray(_useMemo3, 2),\n        subscription = _useMemo4[0],\n        notifyNestedSubs = _useMemo4[1]; // Determine what {store, subscription} value should be put into nested context, if necessary,\n      // and memoize that value to avoid unnecessary context updates.\n\n      var overriddenContextValue = useMemo(function () {\n        if (didStoreComeFromProps) {\n          // This component is directly subscribed to a store from props.\n          // We don't want descendants reading from this store - pass down whatever\n          // the existing context value is from the nearest connected ancestor.\n          return contextValue;\n        } // Otherwise, put this component's subscription instance into context, so that\n        // connected descendants won't update until after this component is done\n\n        return _extends({}, contextValue, {\n          subscription: subscription\n        });\n      }, [didStoreComeFromProps, contextValue, subscription]); // Set up refs to coordinate values between the subscription effect and the render logic\n\n      var lastChildProps = useRef();\n      var lastWrapperProps = useRef(wrapperProps);\n      var childPropsFromStoreUpdate = useRef();\n      var renderIsScheduled = useRef(false);\n      var isProcessingDispatch = useRef(false);\n      var isMounted = useRef(false);\n      var latestSubscriptionCallbackError = useRef();\n      useIsomorphicLayoutEffect(function () {\n        isMounted.current = true;\n        return function () {\n          isMounted.current = false;\n        };\n      }, []);\n      var actualChildPropsSelector = useMemo(function () {\n        var selector = function selector() {\n          // Tricky logic here:\n          // - This render may have been triggered by a Redux store update that produced new child props\n          // - However, we may have gotten new wrapper props after that\n          // If we have new child props, and the same wrapper props, we know we should use the new child props as-is.\n          // But, if we have new wrapper props, those might change the child props, so we have to recalculate things.\n          // So, we'll use the child props from store update only if the wrapper props are the same as last time.\n          if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {\n            return childPropsFromStoreUpdate.current;\n          } // TODO We're reading the store directly in render() here. Bad idea?\n          // This will likely cause Bad Things (TM) to happen in Concurrent Mode.\n          // Note that we do this because on renders _not_ caused by store updates, we need the latest store state\n          // to determine what the child props should be.\n\n          return childPropsSelector(store.getState(), wrapperProps);\n        };\n        return selector;\n      }, [store, wrapperProps]); // We need this to execute synchronously every time we re-render. However, React warns\n      // about useLayoutEffect in SSR, so we try to detect environment and fall back to\n      // just useEffect instead to avoid the warning, since neither will run anyway.\n\n      var subscribeForReact = useMemo(function () {\n        var subscribe = function subscribe(reactListener) {\n          if (!subscription) {\n            return function () {};\n          }\n          return subscribeUpdates(shouldHandleStateChanges, store, subscription,\n          // @ts-ignore\n          childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, isMounted, childPropsFromStoreUpdate, notifyNestedSubs, reactListener);\n        };\n        return subscribe;\n      }, [subscription]);\n      useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, childPropsFromStoreUpdate, notifyNestedSubs]);\n      var actualChildProps;\n      try {\n        actualChildProps = useSyncExternalStore(\n        // TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing\n        subscribeForReact,\n        // TODO This is incredibly hacky. We've already processed the store update and calculated new child props,\n        // TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.\n        actualChildPropsSelector, getServerState ? function () {\n          return childPropsSelector(getServerState(), wrapperProps);\n        } : actualChildPropsSelector);\n      } catch (err) {\n        if (latestSubscriptionCallbackError.current) {\n          ;\n          err.message += \"\\nThe error may be correlated with this previous error:\\n\".concat(latestSubscriptionCallbackError.current.stack, \"\\n\\n\");\n        }\n        throw err;\n      }\n      useIsomorphicLayoutEffect(function () {\n        latestSubscriptionCallbackError.current = undefined;\n        childPropsFromStoreUpdate.current = undefined;\n        lastChildProps.current = actualChildProps;\n      }); // Now that all that's done, we can finally try to actually render the child component.\n      // We memoize the elements for the rendered child component as an optimization.\n\n      var renderedWrappedComponent = useMemo(function () {\n        return /*#__PURE__*/(\n          // @ts-ignore\n          React.createElement(WrappedComponent, _extends({}, actualChildProps, {\n            ref: reactReduxForwardedRef\n          }))\n        );\n      }, [reactReduxForwardedRef, WrappedComponent, actualChildProps]); // If React sees the exact same element reference as last time, it bails out of re-rendering\n      // that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.\n\n      var renderedChild = useMemo(function () {\n        if (shouldHandleStateChanges) {\n          // If this component is subscribed to store updates, we need to pass its own\n          // subscription instance down to our descendants. That means rendering the same\n          // Context instance, and putting a different value into the context.\n          return /*#__PURE__*/React.createElement(ContextToUse.Provider, {\n            value: overriddenContextValue\n          }, renderedWrappedComponent);\n        }\n        return renderedWrappedComponent;\n      }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);\n      return renderedChild;\n    }\n    var _Connect = React.memo(ConnectFunction);\n\n    // Add a hacky cast to get the right output type\n    var Connect = _Connect;\n    Connect.WrappedComponent = WrappedComponent;\n    Connect.displayName = ConnectFunction.displayName = displayName;\n    if (forwardRef) {\n      var _forwarded = React.forwardRef(function forwardConnectRef(props, ref) {\n        // @ts-ignore\n        return /*#__PURE__*/React.createElement(Connect, _extends({}, props, {\n          reactReduxForwardedRef: ref\n        }));\n      });\n      var forwarded = _forwarded;\n      forwarded.displayName = displayName;\n      forwarded.WrappedComponent = WrappedComponent;\n      return hoistStatics(forwarded, WrappedComponent);\n    }\n    return hoistStatics(Connect, WrappedComponent);\n  };\n  return wrapWithConnect;\n}\nexport default connect;","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","hoistStatics","React","useContext","useMemo","useRef","isValidElementType","isContextConsumer","defaultSelectorFactory","mapDispatchToPropsFactory","mapStateToPropsFactory","mergePropsFactory","createSubscription","useIsomorphicLayoutEffect","shallowEqual","warning","ReactReduxContext","notInitialized","useSyncExternalStore","initializeConnect","fn","EMPTY_ARRAY","NO_SUBSCRIPTION_ARRAY","stringifyComponent","Comp","JSON","stringify","err","String","useIsomorphicLayoutEffectWithArgs","effectFunc","effectArgs","dependencies","apply","_toConsumableArray","captureWrapperProps","lastWrapperProps","lastChildProps","renderIsScheduled","wrapperProps","childPropsFromStoreUpdate","notifyNestedSubs","current","subscribeUpdates","shouldHandleStateChanges","store","subscription","childPropsSelector","isMounted","additionalSubscribeListener","didUnsubscribe","lastThrownError","checkForUpdates","latestStoreState","getState","newChildProps","error","e","onStateChange","trySubscribe","unsubscribeWrapper","tryUnsubscribe","initStateUpdates","strictEqual","a","b","hasWarnedAboutDeprecatedPureOption","connect","mapStateToProps","mapDispatchToProps","mergeProps","_ref","arguments","length","undefined","pure","_ref$areStatesEqual","areStatesEqual","_ref$areOwnPropsEqual","areOwnPropsEqual","_ref$areStatePropsEqu","areStatePropsEqual","_ref$areMergedPropsEq","areMergedPropsEqual","_ref$forwardRef","forwardRef","_ref$context","context","process","env","NODE_ENV","Context","initMapStateToProps","initMapDispatchToProps","initMergeProps","Boolean","wrapWithConnect","WrappedComponent","Error","concat","wrappedComponentName","displayName","name","selectorFactoryOptions","ConnectFunction","props","_useMemo","reactReduxForwardedRef","_useMemo2","_slicedToArray","propsContext","ContextToUse","Consumer","createElement","contextValue","didStoreComeFromProps","dispatch","didStoreComeFromContext","getServerState","_useMemo3","bind","_useMemo4","overriddenContextValue","isProcessingDispatch","latestSubscriptionCallbackError","actualChildPropsSelector","selector","subscribeForReact","subscribe","reactListener","actualChildProps","message","stack","renderedWrappedComponent","ref","renderedChild","Provider","value","_Connect","memo","Connect","_forwarded","forwardConnectRef","forwarded"],"sources":["C:/wamp64/www/BloodHub/client/node_modules/react-redux/es/components/connect.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"reactReduxForwardedRef\"];\n\n/* eslint-disable valid-jsdoc, @typescript-eslint/no-unused-vars */\nimport hoistStatics from 'hoist-non-react-statics';\nimport React, { useContext, useMemo, useRef } from 'react';\nimport { isValidElementType, isContextConsumer } from 'react-is';\nimport defaultSelectorFactory from '../connect/selectorFactory';\nimport { mapDispatchToPropsFactory } from '../connect/mapDispatchToProps';\nimport { mapStateToPropsFactory } from '../connect/mapStateToProps';\nimport { mergePropsFactory } from '../connect/mergeProps';\nimport { createSubscription } from '../utils/Subscription';\nimport { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect';\nimport shallowEqual from '../utils/shallowEqual';\nimport warning from '../utils/warning';\nimport { ReactReduxContext } from './Context';\nimport { notInitialized } from '../utils/useSyncExternalStore';\nlet useSyncExternalStore = notInitialized;\nexport const initializeConnect = fn => {\n  useSyncExternalStore = fn;\n}; // Define some constant arrays just to avoid re-creating these\n\nconst EMPTY_ARRAY = [null, 0];\nconst NO_SUBSCRIPTION_ARRAY = [null, null]; // Attempts to stringify whatever not-really-a-component value we were given\n// for logging in an error message\n\nconst stringifyComponent = Comp => {\n  try {\n    return JSON.stringify(Comp);\n  } catch (err) {\n    return String(Comp);\n  }\n};\n\n// This is \"just\" a `useLayoutEffect`, but with two modifications:\n// - we need to fall back to `useEffect` in SSR to avoid annoying warnings\n// - we extract this to a separate function to avoid closing over values\n//   and causing memory leaks\nfunction useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {\n  useIsomorphicLayoutEffect(() => effectFunc(...effectArgs), dependencies);\n} // Effect callback, extracted: assign the latest props values to refs for later usage\n\n\nfunction captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, // actualChildProps: unknown,\nchildPropsFromStoreUpdate, notifyNestedSubs) {\n  // We want to capture the wrapper props and child props we used for later comparisons\n  lastWrapperProps.current = wrapperProps;\n  renderIsScheduled.current = false; // If the render was from a store update, clear out that reference and cascade the subscriber update\n\n  if (childPropsFromStoreUpdate.current) {\n    childPropsFromStoreUpdate.current = null;\n    notifyNestedSubs();\n  }\n} // Effect callback, extracted: subscribe to the Redux store or nearest connected ancestor,\n// check for updates after dispatched actions, and trigger re-renders.\n\n\nfunction subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, isMounted, childPropsFromStoreUpdate, notifyNestedSubs, // forceComponentUpdateDispatch: React.Dispatch<any>,\nadditionalSubscribeListener) {\n  // If we're not subscribed to the store, nothing to do here\n  if (!shouldHandleStateChanges) return () => {}; // Capture values for checking if and when this component unmounts\n\n  let didUnsubscribe = false;\n  let lastThrownError = null; // We'll run this callback every time a store subscription update propagates to this component\n\n  const checkForUpdates = () => {\n    if (didUnsubscribe || !isMounted.current) {\n      // Don't run stale listeners.\n      // Redux doesn't guarantee unsubscriptions happen until next dispatch.\n      return;\n    } // TODO We're currently calling getState ourselves here, rather than letting `uSES` do it\n\n\n    const latestStoreState = store.getState();\n    let newChildProps, error;\n\n    try {\n      // Actually run the selector with the most recent store state and wrapper props\n      // to determine what the child props should be\n      newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);\n    } catch (e) {\n      error = e;\n      lastThrownError = e;\n    }\n\n    if (!error) {\n      lastThrownError = null;\n    } // If the child props haven't changed, nothing to do here - cascade the subscription update\n\n\n    if (newChildProps === lastChildProps.current) {\n      if (!renderIsScheduled.current) {\n        notifyNestedSubs();\n      }\n    } else {\n      // Save references to the new child props.  Note that we track the \"child props from store update\"\n      // as a ref instead of a useState/useReducer because we need a way to determine if that value has\n      // been processed.  If this went into useState/useReducer, we couldn't clear out the value without\n      // forcing another re-render, which we don't want.\n      lastChildProps.current = newChildProps;\n      childPropsFromStoreUpdate.current = newChildProps;\n      renderIsScheduled.current = true; // TODO This is hacky and not how `uSES` is meant to be used\n      // Trigger the React `useSyncExternalStore` subscriber\n\n      additionalSubscribeListener();\n    }\n  }; // Actually subscribe to the nearest connected ancestor (or store)\n\n\n  subscription.onStateChange = checkForUpdates;\n  subscription.trySubscribe(); // Pull data from the store after first render in case the store has\n  // changed since we began.\n\n  checkForUpdates();\n\n  const unsubscribeWrapper = () => {\n    didUnsubscribe = true;\n    subscription.tryUnsubscribe();\n    subscription.onStateChange = null;\n\n    if (lastThrownError) {\n      // It's possible that we caught an error due to a bad mapState function, but the\n      // parent re-rendered without this component and we're about to unmount.\n      // This shouldn't happen as long as we do top-down subscriptions correctly, but\n      // if we ever do those wrong, this throw will surface the error in our tests.\n      // In that case, throw the error from here so it doesn't get lost.\n      throw lastThrownError;\n    }\n  };\n\n  return unsubscribeWrapper;\n} // Reducer initial state creation for our update reducer\n\n\nconst initStateUpdates = () => EMPTY_ARRAY;\n\nfunction strictEqual(a, b) {\n  return a === b;\n}\n/**\r\n * Infers the type of props that a connector will inject into a component.\r\n */\n\n\nlet hasWarnedAboutDeprecatedPureOption = false;\n/**\r\n * Connects a React component to a Redux store.\r\n *\r\n * - Without arguments, just wraps the component, without changing the behavior / props\r\n *\r\n * - If 2 params are passed (3rd param, mergeProps, is skipped), default behavior\r\n * is to override ownProps (as stated in the docs), so what remains is everything that's\r\n * not a state or dispatch prop\r\n *\r\n * - When 3rd param is passed, we don't know if ownProps propagate and whether they\r\n * should be valid component props, because it depends on mergeProps implementation.\r\n * As such, it is the user's responsibility to extend ownProps interface from state or\r\n * dispatch props or both when applicable\r\n *\r\n * @param mapStateToProps A function that extracts values from state\r\n * @param mapDispatchToProps Setup for dispatching actions\r\n * @param mergeProps Optional callback to merge state and dispatch props together\r\n * @param options Options for configuring the connection\r\n *\r\n */\n\nfunction connect(mapStateToProps, mapDispatchToProps, mergeProps, {\n  // The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.\n  // @ts-ignore\n  pure,\n  areStatesEqual = strictEqual,\n  areOwnPropsEqual = shallowEqual,\n  areStatePropsEqual = shallowEqual,\n  areMergedPropsEqual = shallowEqual,\n  // use React's forwardRef to expose a ref of the wrapped component\n  forwardRef = false,\n  // the context consumer to use\n  context = ReactReduxContext\n} = {}) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (pure !== undefined && !hasWarnedAboutDeprecatedPureOption) {\n      hasWarnedAboutDeprecatedPureOption = true;\n      warning('The `pure` option has been removed. `connect` is now always a \"pure/memoized\" component');\n    }\n  }\n\n  const Context = context;\n  const initMapStateToProps = mapStateToPropsFactory(mapStateToProps);\n  const initMapDispatchToProps = mapDispatchToPropsFactory(mapDispatchToProps);\n  const initMergeProps = mergePropsFactory(mergeProps);\n  const shouldHandleStateChanges = Boolean(mapStateToProps);\n\n  const wrapWithConnect = WrappedComponent => {\n    if (process.env.NODE_ENV !== 'production' && !isValidElementType(WrappedComponent)) {\n      throw new Error(`You must pass a component to the function returned by connect. Instead received ${stringifyComponent(WrappedComponent)}`);\n    }\n\n    const wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';\n    const displayName = `Connect(${wrappedComponentName})`;\n    const selectorFactoryOptions = {\n      shouldHandleStateChanges,\n      displayName,\n      wrappedComponentName,\n      WrappedComponent,\n      // @ts-ignore\n      initMapStateToProps,\n      // @ts-ignore\n      initMapDispatchToProps,\n      initMergeProps,\n      areStatesEqual,\n      areStatePropsEqual,\n      areOwnPropsEqual,\n      areMergedPropsEqual\n    };\n\n    function ConnectFunction(props) {\n      const [propsContext, reactReduxForwardedRef, wrapperProps] = useMemo(() => {\n        // Distinguish between actual \"data\" props that were passed to the wrapper component,\n        // and values needed to control behavior (forwarded refs, alternate context instances).\n        // To maintain the wrapperProps object reference, memoize this destructuring.\n        const {\n          reactReduxForwardedRef\n        } = props,\n              wrapperProps = _objectWithoutPropertiesLoose(props, _excluded);\n\n        return [props.context, reactReduxForwardedRef, wrapperProps];\n      }, [props]);\n      const ContextToUse = useMemo(() => {\n        // Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.\n        // Memoize the check that determines which context instance we should use.\n        return propsContext && propsContext.Consumer && // @ts-ignore\n        isContextConsumer( /*#__PURE__*/React.createElement(propsContext.Consumer, null)) ? propsContext : Context;\n      }, [propsContext, Context]); // Retrieve the store and ancestor subscription via context, if available\n\n      const contextValue = useContext(ContextToUse); // The store _must_ exist as either a prop or in context.\n      // We'll check to see if it _looks_ like a Redux store first.\n      // This allows us to pass through a `store` prop that is just a plain value.\n\n      const didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);\n      const didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);\n\n      if (process.env.NODE_ENV !== 'production' && !didStoreComeFromProps && !didStoreComeFromContext) {\n        throw new Error(`Could not find \"store\" in the context of ` + `\"${displayName}\". Either wrap the root component in a <Provider>, ` + `or pass a custom React context provider to <Provider> and the corresponding ` + `React context consumer to ${displayName} in connect options.`);\n      } // Based on the previous check, one of these must be true\n\n\n      const store = didStoreComeFromProps ? props.store : contextValue.store;\n      const getServerState = didStoreComeFromContext ? contextValue.getServerState : store.getState;\n      const childPropsSelector = useMemo(() => {\n        // The child props selector needs the store reference as an input.\n        // Re-create this selector whenever the store changes.\n        return defaultSelectorFactory(store.dispatch, selectorFactoryOptions);\n      }, [store]);\n      const [subscription, notifyNestedSubs] = useMemo(() => {\n        if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY; // This Subscription's source should match where store came from: props vs. context. A component\n        // connected to the store via props shouldn't use subscription from context, or vice versa.\n\n        const subscription = createSubscription(store, didStoreComeFromProps ? undefined : contextValue.subscription); // `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in\n        // the middle of the notification loop, where `subscription` will then be null. This can\n        // probably be avoided if Subscription's listeners logic is changed to not call listeners\n        // that have been unsubscribed in the  middle of the notification loop.\n\n        const notifyNestedSubs = subscription.notifyNestedSubs.bind(subscription);\n        return [subscription, notifyNestedSubs];\n      }, [store, didStoreComeFromProps, contextValue]); // Determine what {store, subscription} value should be put into nested context, if necessary,\n      // and memoize that value to avoid unnecessary context updates.\n\n      const overriddenContextValue = useMemo(() => {\n        if (didStoreComeFromProps) {\n          // This component is directly subscribed to a store from props.\n          // We don't want descendants reading from this store - pass down whatever\n          // the existing context value is from the nearest connected ancestor.\n          return contextValue;\n        } // Otherwise, put this component's subscription instance into context, so that\n        // connected descendants won't update until after this component is done\n\n\n        return _extends({}, contextValue, {\n          subscription\n        });\n      }, [didStoreComeFromProps, contextValue, subscription]); // Set up refs to coordinate values between the subscription effect and the render logic\n\n      const lastChildProps = useRef();\n      const lastWrapperProps = useRef(wrapperProps);\n      const childPropsFromStoreUpdate = useRef();\n      const renderIsScheduled = useRef(false);\n      const isProcessingDispatch = useRef(false);\n      const isMounted = useRef(false);\n      const latestSubscriptionCallbackError = useRef();\n      useIsomorphicLayoutEffect(() => {\n        isMounted.current = true;\n        return () => {\n          isMounted.current = false;\n        };\n      }, []);\n      const actualChildPropsSelector = useMemo(() => {\n        const selector = () => {\n          // Tricky logic here:\n          // - This render may have been triggered by a Redux store update that produced new child props\n          // - However, we may have gotten new wrapper props after that\n          // If we have new child props, and the same wrapper props, we know we should use the new child props as-is.\n          // But, if we have new wrapper props, those might change the child props, so we have to recalculate things.\n          // So, we'll use the child props from store update only if the wrapper props are the same as last time.\n          if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {\n            return childPropsFromStoreUpdate.current;\n          } // TODO We're reading the store directly in render() here. Bad idea?\n          // This will likely cause Bad Things (TM) to happen in Concurrent Mode.\n          // Note that we do this because on renders _not_ caused by store updates, we need the latest store state\n          // to determine what the child props should be.\n\n\n          return childPropsSelector(store.getState(), wrapperProps);\n        };\n\n        return selector;\n      }, [store, wrapperProps]); // We need this to execute synchronously every time we re-render. However, React warns\n      // about useLayoutEffect in SSR, so we try to detect environment and fall back to\n      // just useEffect instead to avoid the warning, since neither will run anyway.\n\n      const subscribeForReact = useMemo(() => {\n        const subscribe = reactListener => {\n          if (!subscription) {\n            return () => {};\n          }\n\n          return subscribeUpdates(shouldHandleStateChanges, store, subscription, // @ts-ignore\n          childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, isMounted, childPropsFromStoreUpdate, notifyNestedSubs, reactListener);\n        };\n\n        return subscribe;\n      }, [subscription]);\n      useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, childPropsFromStoreUpdate, notifyNestedSubs]);\n      let actualChildProps;\n\n      try {\n        actualChildProps = useSyncExternalStore( // TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing\n        subscribeForReact, // TODO This is incredibly hacky. We've already processed the store update and calculated new child props,\n        // TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.\n        actualChildPropsSelector, getServerState ? () => childPropsSelector(getServerState(), wrapperProps) : actualChildPropsSelector);\n      } catch (err) {\n        if (latestSubscriptionCallbackError.current) {\n          ;\n          err.message += `\\nThe error may be correlated with this previous error:\\n${latestSubscriptionCallbackError.current.stack}\\n\\n`;\n        }\n\n        throw err;\n      }\n\n      useIsomorphicLayoutEffect(() => {\n        latestSubscriptionCallbackError.current = undefined;\n        childPropsFromStoreUpdate.current = undefined;\n        lastChildProps.current = actualChildProps;\n      }); // Now that all that's done, we can finally try to actually render the child component.\n      // We memoize the elements for the rendered child component as an optimization.\n\n      const renderedWrappedComponent = useMemo(() => {\n        return (\n          /*#__PURE__*/\n          // @ts-ignore\n          React.createElement(WrappedComponent, _extends({}, actualChildProps, {\n            ref: reactReduxForwardedRef\n          }))\n        );\n      }, [reactReduxForwardedRef, WrappedComponent, actualChildProps]); // If React sees the exact same element reference as last time, it bails out of re-rendering\n      // that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.\n\n      const renderedChild = useMemo(() => {\n        if (shouldHandleStateChanges) {\n          // If this component is subscribed to store updates, we need to pass its own\n          // subscription instance down to our descendants. That means rendering the same\n          // Context instance, and putting a different value into the context.\n          return /*#__PURE__*/React.createElement(ContextToUse.Provider, {\n            value: overriddenContextValue\n          }, renderedWrappedComponent);\n        }\n\n        return renderedWrappedComponent;\n      }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);\n      return renderedChild;\n    }\n\n    const _Connect = React.memo(ConnectFunction);\n\n    // Add a hacky cast to get the right output type\n    const Connect = _Connect;\n    Connect.WrappedComponent = WrappedComponent;\n    Connect.displayName = ConnectFunction.displayName = displayName;\n\n    if (forwardRef) {\n      const _forwarded = React.forwardRef(function forwardConnectRef(props, ref) {\n        // @ts-ignore\n        return /*#__PURE__*/React.createElement(Connect, _extends({}, props, {\n          reactReduxForwardedRef: ref\n        }));\n      });\n\n      const forwarded = _forwarded;\n      forwarded.displayName = displayName;\n      forwarded.WrappedComponent = WrappedComponent;\n      return hoistStatics(forwarded, WrappedComponent);\n    }\n\n    return hoistStatics(Connect, WrappedComponent);\n  };\n\n  return wrapWithConnect;\n}\n\nexport default connect;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}