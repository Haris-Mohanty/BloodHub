{"ast":null,"code":"import _defineProperty from \"C:/wamp64/www/BloodHub/client/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { useCallback, useDebugValue, useRef } from 'react';\nimport { createReduxContextHook, useReduxContext as useDefaultReduxContext } from './useReduxContext';\nimport { ReactReduxContext } from '../components/Context';\nimport { notInitialized } from '../utils/useSyncExternalStore';\nvar useSyncExternalStoreWithSelector = notInitialized;\nexport var initializeUseSelector = function initializeUseSelector(fn) {\n  useSyncExternalStoreWithSelector = fn;\n};\nvar refEquality = function refEquality(a, b) {\n  return a === b;\n};\n/**\r\n * Hook factory, which creates a `useSelector` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useSelector` hook bound to the specified context.\r\n */\n\nexport function createSelectorHook() {\n  var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ReactReduxContext;\n  var useReduxContext = context === ReactReduxContext ? useDefaultReduxContext : createReduxContextHook(context);\n  return function useSelector(selector) {\n    var equalityFnOrOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _ref = typeof equalityFnOrOptions === 'function' ? {\n        equalityFn: equalityFnOrOptions\n      } : equalityFnOrOptions,\n      _ref$equalityFn = _ref.equalityFn,\n      equalityFn = _ref$equalityFn === void 0 ? refEquality : _ref$equalityFn,\n      _ref$stabilityCheck = _ref.stabilityCheck,\n      stabilityCheck = _ref$stabilityCheck === void 0 ? undefined : _ref$stabilityCheck,\n      _ref$noopCheck = _ref.noopCheck,\n      noopCheck = _ref$noopCheck === void 0 ? undefined : _ref$noopCheck;\n    if (process.env.NODE_ENV !== 'production') {\n      if (!selector) {\n        throw new Error(\"You must pass a selector to useSelector\");\n      }\n      if (typeof selector !== 'function') {\n        throw new Error(\"You must pass a function as a selector to useSelector\");\n      }\n      if (typeof equalityFn !== 'function') {\n        throw new Error(\"You must pass a function as an equality function to useSelector\");\n      }\n    }\n    var _useReduxContext = useReduxContext(),\n      store = _useReduxContext.store,\n      subscription = _useReduxContext.subscription,\n      getServerState = _useReduxContext.getServerState,\n      globalStabilityCheck = _useReduxContext.stabilityCheck,\n      globalNoopCheck = _useReduxContext.noopCheck;\n    var firstRun = useRef(true);\n    var wrappedSelector = useCallback(_defineProperty({}, selector.name, function (state) {\n      var selected = selector(state);\n      if (process.env.NODE_ENV !== 'production') {\n        var finalStabilityCheck = typeof stabilityCheck === 'undefined' ? globalStabilityCheck : stabilityCheck;\n        if (finalStabilityCheck === 'always' || finalStabilityCheck === 'once' && firstRun.current) {\n          var toCompare = selector(state);\n          if (!equalityFn(selected, toCompare)) {\n            console.warn('Selector ' + (selector.name || 'unknown') + ' returned a different result when called with the same parameters. This can lead to unnecessary rerenders.' + '\\nSelectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization', {\n              state: state,\n              selected: selected,\n              selected2: toCompare\n            });\n          }\n        }\n        var finalNoopCheck = typeof noopCheck === 'undefined' ? globalNoopCheck : noopCheck;\n        if (finalNoopCheck === 'always' || finalNoopCheck === 'once' && firstRun.current) {\n          // @ts-ignore\n          if (selected === state) {\n            console.warn('Selector ' + (selector.name || 'unknown') + ' returned the root state when called. This can lead to unnecessary rerenders.' + '\\nSelectors that return the entire state are almost certainly a mistake, as they will cause a rerender whenever *anything* in state changes.');\n          }\n        }\n        if (firstRun.current) firstRun.current = false;\n      }\n      return selected;\n    })[selector.name], [selector, globalStabilityCheck, stabilityCheck]);\n    var selectedState = useSyncExternalStoreWithSelector(subscription.addNestedSub, store.getState, getServerState || store.getState, wrappedSelector, equalityFn);\n    useDebugValue(selectedState);\n    return selectedState;\n  };\n}\n/**\r\n * A hook to access the redux store's state. This hook takes a selector function\r\n * as an argument. The selector is called with the store state.\r\n *\r\n * This hook takes an optional equality comparison function as the second parameter\r\n * that allows you to customize the way the selected state is compared to determine\r\n * whether the component needs to be re-rendered.\r\n *\r\n * @param {Function} selector the selector function\r\n * @param {Function=} equalityFn the function that will be used to determine equality\r\n *\r\n * @returns {any} the selected state\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useSelector } from 'react-redux'\r\n *\r\n * export const CounterComponent = () => {\r\n *   const counter = useSelector(state => state.counter)\r\n *   return <div>{counter}</div>\r\n * }\r\n */\n\nexport var useSelector = /*#__PURE__*/createSelectorHook();","map":{"version":3,"names":["useCallback","useDebugValue","useRef","createReduxContextHook","useReduxContext","useDefaultReduxContext","ReactReduxContext","notInitialized","useSyncExternalStoreWithSelector","initializeUseSelector","fn","refEquality","a","b","createSelectorHook","context","arguments","length","undefined","useSelector","selector","equalityFnOrOptions","_ref","equalityFn","_ref$equalityFn","_ref$stabilityCheck","stabilityCheck","_ref$noopCheck","noopCheck","process","env","NODE_ENV","Error","_useReduxContext","store","subscription","getServerState","globalStabilityCheck","globalNoopCheck","firstRun","wrappedSelector","_defineProperty","name","state","selected","finalStabilityCheck","current","toCompare","console","warn","selected2","finalNoopCheck","selectedState","addNestedSub","getState"],"sources":["C:/wamp64/www/BloodHub/client/node_modules/react-redux/es/hooks/useSelector.js"],"sourcesContent":["import { useCallback, useDebugValue, useRef } from 'react';\nimport { createReduxContextHook, useReduxContext as useDefaultReduxContext } from './useReduxContext';\nimport { ReactReduxContext } from '../components/Context';\nimport { notInitialized } from '../utils/useSyncExternalStore';\nlet useSyncExternalStoreWithSelector = notInitialized;\nexport const initializeUseSelector = fn => {\n  useSyncExternalStoreWithSelector = fn;\n};\n\nconst refEquality = (a, b) => a === b;\n/**\r\n * Hook factory, which creates a `useSelector` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useSelector` hook bound to the specified context.\r\n */\n\n\nexport function createSelectorHook(context = ReactReduxContext) {\n  const useReduxContext = context === ReactReduxContext ? useDefaultReduxContext : createReduxContextHook(context);\n  return function useSelector(selector, equalityFnOrOptions = {}) {\n    const {\n      equalityFn = refEquality,\n      stabilityCheck = undefined,\n      noopCheck = undefined\n    } = typeof equalityFnOrOptions === 'function' ? {\n      equalityFn: equalityFnOrOptions\n    } : equalityFnOrOptions;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!selector) {\n        throw new Error(`You must pass a selector to useSelector`);\n      }\n\n      if (typeof selector !== 'function') {\n        throw new Error(`You must pass a function as a selector to useSelector`);\n      }\n\n      if (typeof equalityFn !== 'function') {\n        throw new Error(`You must pass a function as an equality function to useSelector`);\n      }\n    }\n\n    const {\n      store,\n      subscription,\n      getServerState,\n      stabilityCheck: globalStabilityCheck,\n      noopCheck: globalNoopCheck\n    } = useReduxContext();\n    const firstRun = useRef(true);\n    const wrappedSelector = useCallback({\n      [selector.name](state) {\n        const selected = selector(state);\n\n        if (process.env.NODE_ENV !== 'production') {\n          const finalStabilityCheck = typeof stabilityCheck === 'undefined' ? globalStabilityCheck : stabilityCheck;\n\n          if (finalStabilityCheck === 'always' || finalStabilityCheck === 'once' && firstRun.current) {\n            const toCompare = selector(state);\n\n            if (!equalityFn(selected, toCompare)) {\n              console.warn('Selector ' + (selector.name || 'unknown') + ' returned a different result when called with the same parameters. This can lead to unnecessary rerenders.' + '\\nSelectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization', {\n                state,\n                selected,\n                selected2: toCompare\n              });\n            }\n          }\n\n          const finalNoopCheck = typeof noopCheck === 'undefined' ? globalNoopCheck : noopCheck;\n\n          if (finalNoopCheck === 'always' || finalNoopCheck === 'once' && firstRun.current) {\n            // @ts-ignore\n            if (selected === state) {\n              console.warn('Selector ' + (selector.name || 'unknown') + ' returned the root state when called. This can lead to unnecessary rerenders.' + '\\nSelectors that return the entire state are almost certainly a mistake, as they will cause a rerender whenever *anything* in state changes.');\n            }\n          }\n\n          if (firstRun.current) firstRun.current = false;\n        }\n\n        return selected;\n      }\n\n    }[selector.name], [selector, globalStabilityCheck, stabilityCheck]);\n    const selectedState = useSyncExternalStoreWithSelector(subscription.addNestedSub, store.getState, getServerState || store.getState, wrappedSelector, equalityFn);\n    useDebugValue(selectedState);\n    return selectedState;\n  };\n}\n/**\r\n * A hook to access the redux store's state. This hook takes a selector function\r\n * as an argument. The selector is called with the store state.\r\n *\r\n * This hook takes an optional equality comparison function as the second parameter\r\n * that allows you to customize the way the selected state is compared to determine\r\n * whether the component needs to be re-rendered.\r\n *\r\n * @param {Function} selector the selector function\r\n * @param {Function=} equalityFn the function that will be used to determine equality\r\n *\r\n * @returns {any} the selected state\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useSelector } from 'react-redux'\r\n *\r\n * export const CounterComponent = () => {\r\n *   const counter = useSelector(state => state.counter)\r\n *   return <div>{counter}</div>\r\n * }\r\n */\n\nexport const useSelector = /*#__PURE__*/createSelectorHook();"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}