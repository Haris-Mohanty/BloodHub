{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\BloodHub\\\\client\\\\src\\\\pages\\\\Admin\\\\AdminHome.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport Layout from \"../../components/shared/Layout/Layout\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminHome = () => {\n  _s();\n  const {\n    user\n  } = useSelector(state => state.auth);\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mt-4\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex flex-column\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Welcome Admin: \", /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fw-bold text-success\",\n            children: [\" \", user === null || user === void 0 ? void 0 : user.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 12,\n            columnNumber: 28\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-primary\",\n          children: \"Manage Blood Records-\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"$nbsp; Managing blood records in a blood bank app requires careful organization and implementation of data management features. Here are some steps to consider when developing or managing blood records in a blood bank app: User Registration: Allow users to register in the app using their personal information, such as name, contact details, and blood type. This information will be crucial for managing blood records. Donor Profile: Create a profile for each registered donor, including their demographic information, medical history, blood type, and eligibility status (e.g., whether they can donate blood or not). This profile should also include their donation history, including the date and type of blood donated. Blood Inventory: Maintain an inventory of available blood units in the blood bank. Each unit should have a unique identification number, blood type, quantity, and expiration date. Update the inventory whenever new units are donated or when units expire. Donation Tracking: Implement a system to track blood donations. When a donor donates blood, record the date, type of blood donated, and any relevant test results (e.g., blood screening tests for infectious diseases). Search and Matching: Enable a search functionality that allows users to search for available blood units based on blood type, location, and other relevant criteria. Ensure that the search algorithm matches the requested blood type with the available units accurately. Notifications: Implement a notification system to remind eligible donors when they are due for a donation or when their blood type is in high demand. Data Security: Ensure that the app follows strict security protocols to protect donor information and comply with privacy regulations. Use encryption and secure authentication methods to prevent unauthorized access to sensitive data. Integration with External Systems: If applicable, integrate the blood bank app with external systems, such as hospitals or clinics, to exchange relevant data and ensure accurate blood supply management. Reporting and Analytics: Implement reporting and analytics features to generate insights on blood supply, demand, and donation patterns. This can help optimize inventory management and plan donation drives more effectively. Regular Maintenance and Updates: Continuously monitor and update the app to fix bugs, improve performance, and incorporate new features based on user feedback and emerging technologies.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminHome, \"HA6wZhGeXNR9tzJ3aDGGsGCdOyI=\", false, function () {\n  return [useSelector];\n});\n_c = AdminHome;\nexport default AdminHome;\nvar _c;\n$RefreshReg$(_c, \"AdminHome\");","map":{"version":3,"names":["React","Layout","useSelector","jsxDEV","_jsxDEV","AdminHome","_s","user","state","auth","children","className","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/wamp64/www/BloodHub/client/src/pages/Admin/AdminHome.js"],"sourcesContent":["import React from \"react\";\r\nimport Layout from \"../../components/shared/Layout/Layout\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst AdminHome = () => {\r\n  const { user } = useSelector((state) => state.auth);\r\n  return (\r\n    <Layout>\r\n      <div className=\"container mt-4\">\r\n        <div className=\"d-flex flex-column\">\r\n          <h1>\r\n            Welcome Admin: <i className=\"fw-bold text-success\"> {user?.name}</i>\r\n          </h1>\r\n          <hr />\r\n          <h3 className=\"text-primary\">Manage Blood Records-</h3>\r\n          <p>\r\n            $nbsp; Managing blood records in a blood bank app requires careful\r\n            organization and implementation of data management features. Here\r\n            are some steps to consider when developing or managing blood records\r\n            in a blood bank app: User Registration: Allow users to register in\r\n            the app using their personal information, such as name, contact\r\n            details, and blood type. This information will be crucial for\r\n            managing blood records. Donor Profile: Create a profile for each\r\n            registered donor, including their demographic information, medical\r\n            history, blood type, and eligibility status (e.g., whether they can\r\n            donate blood or not). This profile should also include their\r\n            donation history, including the date and type of blood donated.\r\n            Blood Inventory: Maintain an inventory of available blood units in\r\n            the blood bank. Each unit should have a unique identification\r\n            number, blood type, quantity, and expiration date. Update the\r\n            inventory whenever new units are donated or when units expire.\r\n            Donation Tracking: Implement a system to track blood donations. When\r\n            a donor donates blood, record the date, type of blood donated, and\r\n            any relevant test results (e.g., blood screening tests for\r\n            infectious diseases). Search and Matching: Enable a search\r\n            functionality that allows users to search for available blood units\r\n            based on blood type, location, and other relevant criteria. Ensure\r\n            that the search algorithm matches the requested blood type with the\r\n            available units accurately. Notifications: Implement a notification\r\n            system to remind eligible donors when they are due for a donation or\r\n            when their blood type is in high demand. Data Security: Ensure that\r\n            the app follows strict security protocols to protect donor\r\n            information and comply with privacy regulations. Use encryption and\r\n            secure authentication methods to prevent unauthorized access to\r\n            sensitive data. Integration with External Systems: If applicable,\r\n            integrate the blood bank app with external systems, such as\r\n            hospitals or clinics, to exchange relevant data and ensure accurate\r\n            blood supply management. Reporting and Analytics: Implement\r\n            reporting and analytics features to generate insights on blood\r\n            supply, demand, and donation patterns. This can help optimize\r\n            inventory management and plan donation drives more effectively.\r\n            Regular Maintenance and Updates: Continuously monitor and update the\r\n            app to fix bugs, improve performance, and incorporate new features\r\n            based on user feedback and emerging technologies.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default AdminHome;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,uCAAuC;AAC1D,SAASC,WAAW,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM;IAAEC;EAAK,CAAC,GAAGL,WAAW,CAAEM,KAAK,IAAKA,KAAK,CAACC,IAAI,CAAC;EACnD,oBACEL,OAAA,CAACH,MAAM;IAAAS,QAAA,eACLN,OAAA;MAAKO,SAAS,EAAC,gBAAgB;MAAAD,QAAA,eAC7BN,OAAA;QAAKO,SAAS,EAAC,oBAAoB;QAAAD,QAAA,gBACjCN,OAAA;UAAAM,QAAA,GAAI,iBACa,eAAAN,OAAA;YAAGO,SAAS,EAAC,sBAAsB;YAAAD,QAAA,GAAC,GAAC,EAACH,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEK,IAAI;UAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClE,CAAC,eACLZ,OAAA;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACNZ,OAAA;UAAIO,SAAS,EAAC,cAAc;UAAAD,QAAA,EAAC;QAAqB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACvDZ,OAAA;UAAAM,QAAA,EAAG;QAuCH;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEb,CAAC;AAACV,EAAA,CAvDID,SAAS;EAAA,QACIH,WAAW;AAAA;AAAAe,EAAA,GADxBZ,SAAS;AAyDf,eAAeA,SAAS;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}