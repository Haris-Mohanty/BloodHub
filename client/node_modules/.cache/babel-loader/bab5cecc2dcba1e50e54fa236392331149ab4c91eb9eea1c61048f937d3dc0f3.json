{"ast":null,"code":"import _regeneratorRuntime from \"C:/wamp64/www/BloodHub/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/wamp64/www/BloodHub/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"C:/wamp64/www/BloodHub/client/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _createClass from \"C:/wamp64/www/BloodHub/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/wamp64/www/BloodHub/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"C:/wamp64/www/BloodHub/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/wamp64/www/BloodHub/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"C:/wamp64/www/BloodHub/client/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _slicedToArray from \"C:/wamp64/www/BloodHub/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toArray from \"C:/wamp64/www/BloodHub/client/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport _createForOfIteratorHelper from \"C:/wamp64/www/BloodHub/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"C:/wamp64/www/BloodHub/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/**\n * @remix-run/router v1.6.3\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nvar PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _options = options,\n    _options$initialEntri = _options.initialEntries,\n    initialEntries = _options$initialEntri === void 0 ? [\"/\"] : _options$initialEntri,\n    initialIndex = _options.initialIndex,\n    _options$v5Compat = _options.v5Compat,\n    v5Compat = _options$v5Compat === void 0 ? false : _options$v5Compat;\n  var entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map(function (entry, index) {\n    return createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined);\n  });\n  var index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  var action = Action.Pop;\n  var listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    var location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  var history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref: createHref,\n    createURL: function createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation: function encodeLocation(to) {\n      var path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push: function push(to, state) {\n      action = Action.Push;\n      var nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace: function replace(to, state) {\n      action = Action.Replace;\n      var nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go: function go(delta) {\n      action = Action.Pop;\n      var nextIndex = clampIndex(index + delta);\n      var nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: delta\n        });\n      }\n    },\n    listen: function listen(fn) {\n      listener = fn;\n      return function () {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    var _window$location = window.location,\n      pathname = _window$location.pathname,\n      search = _window$location.search,\n      hash = _window$location.hash;\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    var _parsePath = parsePath(window.location.hash.substr(1)),\n      _parsePath$pathname = _parsePath.pathname,\n      pathname = _parsePath$pathname === void 0 ? \"/\" : _parsePath$pathname,\n      _parsePath$search = _parsePath.search,\n      search = _parsePath$search === void 0 ? \"\" : _parsePath$search,\n      _parsePath$hash = _parsePath.hash,\n      hash = _parsePath$hash === void 0 ? \"\" : _parsePath$hash;\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    var base = window.document.querySelector(\"base\");\n    var href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      var url = window.location.href;\n      var hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  var location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state: state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  var _ref$pathname = _ref.pathname,\n    pathname = _ref$pathname === void 0 ? \"/\" : _ref$pathname,\n    _ref$search = _ref.search,\n    search = _ref$search === void 0 ? \"\" : _ref$search,\n    _ref$hash = _ref.hash,\n    hash = _ref$hash === void 0 ? \"\" : _ref$hash;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  var parsedPath = {};\n  if (path) {\n    var hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    var searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, _createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _options2 = options,\n    _options2$window = _options2.window,\n    window = _options2$window === void 0 ? document.defaultView : _options2$window,\n    _options2$v5Compat = _options2.v5Compat,\n    v5Compat = _options2$v5Compat === void 0 ? false : _options2$v5Compat;\n  var globalHistory = window.history;\n  var action = Action.Pop;\n  var listener = null;\n  var index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    var state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    var nextIndex = getIndex();\n    var delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    var historyState = getHistoryState(location, index);\n    var url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    var historyState = getHistoryState(location, index);\n    var url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    var base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    var href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  var history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen: function listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return function () {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref: function createHref(to) {\n      return _createHref(window, to);\n    },\n    createURL: createURL,\n    encodeLocation: function encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      var url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push: push,\n    replace: replace,\n    go: function go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nvar immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map(function (route, index) {\n    var treePath = [].concat(_toConsumableArray(parentPath), [index]);\n    var id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      var indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id: id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      var pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id: id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  var location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  var pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  var branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  var matches = null;\n  for (var i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i],\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n  return matches;\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  var flattenRoute = function flattenRoute(route, index, relativePath) {\n    var meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route: route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    var path = joinPaths([parentPath, meta.relativePath]);\n    var routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path: path,\n      score: computeScore(path, route.index),\n      routesMeta: routesMeta\n    });\n  };\n  routes.forEach(function (route, index) {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      var _iterator = _createForOfIteratorHelper(explodeOptionalSegments(route.path)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var exploded = _step.value;\n          flattenRoute(route, index, exploded);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  var segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  var _segments = _toArray(segments),\n    first = _segments[0],\n    rest = _segments.slice(1);\n  // Optional path segments are denoted by a trailing `?`\n  var isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  var required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  var restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  var result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push.apply(result, _toConsumableArray(restExploded.map(function (subpath) {\n    return subpath === \"\" ? required : [required, subpath].join(\"/\");\n  })));\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push.apply(result, _toConsumableArray(restExploded));\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(function (exploded) {\n    return path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded;\n  });\n}\nfunction rankRouteBranches(branches) {\n  branches.sort(function (a, b) {\n    return a.score !== b.score ? b.score - a.score // Higher score first\n    : compareIndexes(a.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }), b.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }));\n  });\n}\nvar paramRe = /^:\\w+$/;\nvar dynamicSegmentValue = 3;\nvar indexRouteValue = 2;\nvar emptySegmentValue = 1;\nvar staticSegmentValue = 10;\nvar splatPenalty = -2;\nvar isSplat = function isSplat(s) {\n  return s === \"*\";\n};\nfunction computeScore(path, index) {\n  var segments = path.split(\"/\");\n  var initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(function (s) {\n    return !isSplat(s);\n  }).reduce(function (score, segment) {\n    return score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue);\n  }, initialScore);\n}\nfunction compareIndexes(a, b) {\n  var siblings = a.length === b.length && a.slice(0, -1).every(function (n, i) {\n    return n === b[i];\n  });\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  var routesMeta = branch.routesMeta;\n  var matchedParams = {};\n  var matchedPathname = \"/\";\n  var matches = [];\n  for (var i = 0; i < routesMeta.length; ++i) {\n    var meta = routesMeta[i];\n    var end = i === routesMeta.length - 1;\n    var remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    var match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end: end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    var route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route: route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  var path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  var prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  var segments = path.split(/\\/+/).map(function (segment, index, array) {\n    var isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      var star = \"*\";\n      var starParam = params[star];\n      // Apply the splat\n      return starParam;\n    }\n    var keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n    if (keyMatch) {\n      var _keyMatch = _slicedToArray(keyMatch, 3),\n        key = _keyMatch[1],\n        optional = _keyMatch[2];\n      var param = params[key];\n      if (optional === \"?\") {\n        return param == null ? \"\" : param;\n      }\n      if (param == null) {\n        invariant(false, \"Missing \\\":\" + key + \"\\\" param\");\n      }\n      return param;\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(function (segment) {\n    return !!segment;\n  });\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  var _compilePath = compilePath(pattern.path, pattern.caseSensitive, pattern.end),\n    _compilePath2 = _slicedToArray(_compilePath, 2),\n    matcher = _compilePath2[0],\n    paramNames = _compilePath2[1];\n  var match = pathname.match(matcher);\n  if (!match) return null;\n  var matchedPathname = match[0];\n  var pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  var captureGroups = match.slice(1);\n  var params = paramNames.reduce(function (memo, paramName, index) {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      var splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params: params,\n    pathname: matchedPathname,\n    pathnameBase: pathnameBase,\n    pattern: pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  var paramNames = [];\n  var regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, function (_, paramName) {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  var matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  var startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  var nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  var _ref3 = typeof to === \"string\" ? parsePath(to) : to,\n    toPathname = _ref3.pathname,\n    _ref3$search = _ref3.search,\n    search = _ref3$search === void 0 ? \"\" : _ref3$search,\n    _ref3$hash = _ref3.hash,\n    hash = _ref3$hash === void 0 ? \"\" : _ref3$hash;\n  var pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname: pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  var segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  var relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(function (segment) {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter(function (match, index) {\n    return index === 0 || match.route.path && match.route.path.length > 0;\n  });\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  var to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  var isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  var toPathname = isEmptyPath ? \"/\" : to.pathname;\n  var from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    var routePathnameIndex = routePathnames.length - 1;\n    if (toPathname.startsWith(\"..\")) {\n      var toSegments = toPathname.split(\"/\");\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  var path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  var hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  var hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nvar joinPaths = function joinPaths(paths) {\n  return paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n};\n/**\n * @private\n */\nvar normalizePathname = function normalizePathname(pathname) {\n  return pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n};\n/**\n * @private\n */\nvar normalizeSearch = function normalizeSearch(search) {\n  return !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n};\n/**\n * @private\n */\nvar normalizeHash = function normalizeHash(hash) {\n  return !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n};\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nvar json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  var headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers: headers\n  }));\n};\nvar AbortedDeferredError = /*#__PURE__*/function (_Error) {\n  _inherits(AbortedDeferredError, _Error);\n  var _super = _createSuper(AbortedDeferredError);\n  function AbortedDeferredError() {\n    _classCallCheck(this, AbortedDeferredError);\n    return _super.apply(this, arguments);\n  }\n  return _createClass(AbortedDeferredError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar DeferredData = /*#__PURE__*/function () {\n  function DeferredData(data, responseInit) {\n    var _this = this;\n    _classCallCheck(this, DeferredData);\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    var reject;\n    this.abortPromise = new Promise(function (_, r) {\n      return reject = r;\n    });\n    this.controller = new AbortController();\n    var onAbort = function onAbort() {\n      return reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    };\n    this.unlistenAbortSignal = function () {\n      return _this.controller.signal.removeEventListener(\"abort\", onAbort);\n    };\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce(function (acc, _ref) {\n      var _ref4 = _slicedToArray(_ref, 2),\n        key = _ref4[0],\n        value = _ref4[1];\n      return Object.assign(acc, _defineProperty({}, key, _this.trackPromise(key, value)));\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  _createClass(DeferredData, [{\n    key: \"trackPromise\",\n    value: function trackPromise(key, value) {\n      var _this2 = this;\n      if (!(value instanceof Promise)) {\n        return value;\n      }\n      this.deferredKeys.push(key);\n      this.pendingKeysSet.add(key);\n      // We store a little wrapper promise that will be extended with\n      // _data/_error props upon resolve/reject\n      var promise = Promise.race([value, this.abortPromise]).then(function (data) {\n        return _this2.onSettle(promise, key, null, data);\n      }, function (error) {\n        return _this2.onSettle(promise, key, error);\n      });\n      // Register rejection listeners to avoid uncaught promise rejections on\n      // errors or aborted deferred values\n      promise.catch(function () {});\n      Object.defineProperty(promise, \"_tracked\", {\n        get: function get() {\n          return true;\n        }\n      });\n      return promise;\n    }\n  }, {\n    key: \"onSettle\",\n    value: function onSettle(promise, key, error, data) {\n      if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n        this.unlistenAbortSignal();\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        return Promise.reject(error);\n      }\n      this.pendingKeysSet.delete(key);\n      if (this.done) {\n        // Nothing left to abort!\n        this.unlistenAbortSignal();\n      }\n      if (error) {\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        this.emit(false, key);\n        return Promise.reject(error);\n      }\n      Object.defineProperty(promise, \"_data\", {\n        get: function get() {\n          return data;\n        }\n      });\n      this.emit(false, key);\n      return data;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(aborted, settledKey) {\n      this.subscribers.forEach(function (subscriber) {\n        return subscriber(aborted, settledKey);\n      });\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(fn) {\n      var _this3 = this;\n      this.subscribers.add(fn);\n      return function () {\n        return _this3.subscribers.delete(fn);\n      };\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      var _this4 = this;\n      this.controller.abort();\n      this.pendingKeysSet.forEach(function (v, k) {\n        return _this4.pendingKeysSet.delete(k);\n      });\n      this.emit(true);\n    }\n  }, {\n    key: \"resolveData\",\n    value: function () {\n      var _resolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(signal) {\n        var _this5 = this;\n        var aborted, onAbort;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              aborted = false;\n              if (this.done) {\n                _context.next = 7;\n                break;\n              }\n              onAbort = function onAbort() {\n                return _this5.cancel();\n              };\n              signal.addEventListener(\"abort\", onAbort);\n              _context.next = 6;\n              return new Promise(function (resolve) {\n                _this5.subscribe(function (aborted) {\n                  signal.removeEventListener(\"abort\", onAbort);\n                  if (aborted || _this5.done) {\n                    resolve(aborted);\n                  }\n                });\n              });\n            case 6:\n              aborted = _context.sent;\n            case 7:\n              return _context.abrupt(\"return\", aborted);\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function resolveData(_x) {\n        return _resolveData.apply(this, arguments);\n      }\n      return resolveData;\n    }()\n  }, {\n    key: \"done\",\n    get: function get() {\n      return this.pendingKeysSet.size === 0;\n    }\n  }, {\n    key: \"unwrappedData\",\n    get: function get() {\n      invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n      return Object.entries(this.data).reduce(function (acc, _ref2) {\n        var _ref5 = _slicedToArray(_ref2, 2),\n          key = _ref5[0],\n          value = _ref5[1];\n        return Object.assign(acc, _defineProperty({}, key, unwrapTrackedPromise(value)));\n      }, {});\n    }\n  }, {\n    key: \"pendingKeys\",\n    get: function get() {\n      return Array.from(this.pendingKeysSet);\n    }\n  }]);\n  return DeferredData;\n}();\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nvar defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nvar redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  var responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  var headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers: headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nvar ErrorResponse = /*#__PURE__*/_createClass(function ErrorResponse(status, statusText, data, internal) {\n  _classCallCheck(this, ErrorResponse);\n  if (internal === void 0) {\n    internal = false;\n  }\n  this.status = status;\n  this.statusText = statusText || \"\";\n  this.internal = internal;\n  if (data instanceof Error) {\n    this.data = data.toString();\n    this.error = data;\n  } else {\n    this.data = data;\n  }\n});\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\nvar validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nvar validMutationMethods = new Set(validMutationMethodsArr);\nvar validRequestMethodsArr = [\"get\"].concat(validMutationMethodsArr);\nvar validRequestMethods = new Set(validRequestMethodsArr);\nvar redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nvar redirectPreserveMethodStatusCodes = new Set([307, 308]);\nvar IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nvar IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nvar IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nvar ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nvar defaultMapRouteProperties = function defaultMapRouteProperties(route) {\n  return {\n    hasErrorBoundary: Boolean(route.hasErrorBoundary)\n  };\n};\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  var routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  var isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  var isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  var mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    var detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = function mapRouteProperties(route) {\n      return {\n        hasErrorBoundary: detectErrorBoundary(route)\n      };\n    };\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  var manifest = {};\n  // Routes in tree format for matching\n  var dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  var inFlightDataRoutes;\n  var basename = init.basename || \"/\";\n  // Config driven behavior flags\n  var future = _extends({\n    v7_normalizeFormMethod: false,\n    v7_prependBasename: false\n  }, init.future);\n  // Cleanup function for history\n  var unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  var subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  var savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  var getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  var getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  var initialScrollRestored = init.hydrationData != null;\n  var initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  var initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    var error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    var _getShortCircuitMatch = getShortCircuitMatches(dataRoutes),\n      matches = _getShortCircuitMatch.matches,\n      route = _getShortCircuitMatch.route;\n    initialMatches = matches;\n    initialErrors = _defineProperty({}, route.id, error);\n  }\n  var initialized =\n  // All initialMatches need to be loaded before we're ready.  If we have lazy\n  // functions around still then we'll need to run them in initialize()\n  !initialMatches.some(function (m) {\n    return m.route.lazy;\n  }) && (\n  // And we have to either have no loaders or have been provided hydrationData\n  !initialMatches.some(function (m) {\n    return m.route.loader;\n  }) || init.hydrationData != null);\n  var router;\n  var state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized: initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  var pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  var pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  var pendingNavigationController;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  var isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  var isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  var cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  var cancelledFetcherLoads = [];\n  // AbortControllers for any in-flight fetchers\n  var fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  var incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  var pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  var fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  var fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  var fetchLoadMatches = new Map();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  var activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  var blockerFunctions = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  var ignoreNextHistoryUpdate = false;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(function (_ref) {\n      var historyAction = _ref.action,\n        location = _ref.location,\n        delta = _ref.delta;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      var blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction: historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location: location,\n          proceed: function proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location: location\n            });\n            // Re-do the same POP navigation we just blocked\n            init.history.go(delta);\n          },\n          reset: function reset() {\n            deleteBlocker(blockerKey);\n            updateState({\n              blockers: new Map(router.state.blockers)\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach(function (_, key) {\n      return deleteFetcher(key);\n    });\n    state.blockers.forEach(function (_, key) {\n      return deleteBlocker(key);\n    });\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return function () {\n      return subscribers.delete(fn);\n    };\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(function (subscriber) {\n      return subscriber(state);\n    });\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    var isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    var actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    var loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    var _iterator2 = _createForOfIteratorHelper(blockerFunctions),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _step2$value = _slicedToArray(_step2.value, 1),\n          key = _step2$value[0];\n        deleteBlocker(key);\n      }\n      // Always respect the user flag.  Otherwise don't reset on mutation\n      // submission navigations unless they redirect\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    var preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    updateState(_extends({}, newState, {\n      actionData: actionData,\n      loaderData: loaderData,\n      historyAction: pendingAction,\n      location: location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: preventScrollReset,\n      blockers: new Map(state.blockers)\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  function navigate(_x2, _x3) {\n    return _navigate.apply(this, arguments);\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function _navigate() {\n    _navigate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(to, opts) {\n      var normalizedPath, _normalizeNavigateOpt2, path, submission, error, currentLocation, nextLocation, userReplace, historyAction, preventScrollReset, blockerKey;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(typeof to === \"number\")) {\n              _context2.next = 3;\n              break;\n            }\n            init.history.go(to);\n            return _context2.abrupt(\"return\");\n          case 3:\n            normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n            _normalizeNavigateOpt2 = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts), path = _normalizeNavigateOpt2.path, submission = _normalizeNavigateOpt2.submission, error = _normalizeNavigateOpt2.error;\n            currentLocation = state.location;\n            nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n            // URL from window.location, so we need to encode it here so the behavior\n            // remains the same as POP and non-data-router usages.  new URL() does all\n            // the same encoding we'd get from a history.pushState/window.location read\n            // without having to touch history\n            nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n            userReplace = opts && opts.replace != null ? opts.replace : undefined;\n            historyAction = Action.Push;\n            if (userReplace === true) {\n              historyAction = Action.Replace;\n            } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n              // By default on submissions to the current location we REPLACE so that\n              // users don't have to double-click the back button to get to the prior\n              // location.  If the user redirects to a different location from the\n              // action/loader this will be ignored and the redirect will be a PUSH\n              historyAction = Action.Replace;\n            }\n            preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n            blockerKey = shouldBlockNavigation({\n              currentLocation: currentLocation,\n              nextLocation: nextLocation,\n              historyAction: historyAction\n            });\n            if (!blockerKey) {\n              _context2.next = 16;\n              break;\n            }\n            // Put the blocker into a blocked state\n            updateBlocker(blockerKey, {\n              state: \"blocked\",\n              location: nextLocation,\n              proceed: function proceed() {\n                updateBlocker(blockerKey, {\n                  state: \"proceeding\",\n                  proceed: undefined,\n                  reset: undefined,\n                  location: nextLocation\n                });\n                // Send the same navigation through\n                navigate(to, opts);\n              },\n              reset: function reset() {\n                deleteBlocker(blockerKey);\n                updateState({\n                  blockers: new Map(state.blockers)\n                });\n              }\n            });\n            return _context2.abrupt(\"return\");\n          case 16:\n            _context2.next = 18;\n            return startNavigation(historyAction, nextLocation, {\n              submission: submission,\n              // Send through the formData serialization error if we have one so we can\n              // render at the right error boundary after we match routes\n              pendingError: error,\n              preventScrollReset: preventScrollReset,\n              replace: opts && opts.replace\n            });\n          case 18:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 19:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return _navigate.apply(this, arguments);\n  }\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  function startNavigation(_x4, _x5, _x6) {\n    return _startNavigation.apply(this, arguments);\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  function _startNavigation() {\n    _startNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(historyAction, location, opts) {\n      var routesToUse, loadingNavigation, matches, _error, _getShortCircuitMatch2, notFoundMatches, _route, request, pendingActionData, pendingError, actionOutput, navigation, _yield$handleLoaders, shortCircuited, loaderData, errors;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            // Abort any in-progress navigations and start a new one. Unset any ongoing\n            // uninterrupted revalidations unless told otherwise, since we want this\n            // new navigation to update history normally\n            pendingNavigationController && pendingNavigationController.abort();\n            pendingNavigationController = null;\n            pendingAction = historyAction;\n            isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n            // Save the current scroll position every time we start a new navigation,\n            // and track whether we should reset scroll on completion\n            saveScrollPosition(state.location, state.matches);\n            pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n            routesToUse = inFlightDataRoutes || dataRoutes;\n            loadingNavigation = opts && opts.overrideNavigation;\n            matches = matchRoutes(routesToUse, location, basename); // Short circuit with a 404 on the root error boundary if we match nothing\n            if (matches) {\n              _context3.next = 15;\n              break;\n            }\n            _error = getInternalRouterError(404, {\n              pathname: location.pathname\n            });\n            _getShortCircuitMatch2 = getShortCircuitMatches(routesToUse), notFoundMatches = _getShortCircuitMatch2.matches, _route = _getShortCircuitMatch2.route; // Cancel all pending deferred on 404s since we don't keep any routes\n            cancelActiveDeferreds();\n            completeNavigation(location, {\n              matches: notFoundMatches,\n              loaderData: {},\n              errors: _defineProperty({}, _route.id, _error)\n            });\n            return _context3.abrupt(\"return\");\n          case 15:\n            if (!(state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod)))) {\n              _context3.next = 18;\n              break;\n            }\n            completeNavigation(location, {\n              matches: matches\n            });\n            return _context3.abrupt(\"return\");\n          case 18:\n            // Create a controller/Request for this navigation\n            pendingNavigationController = new AbortController();\n            request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n            if (!(opts && opts.pendingError)) {\n              _context3.next = 24;\n              break;\n            }\n            // If we have a pendingError, it means the user attempted a GET submission\n            // with binary FormData so assign here and skip to handleLoaders.  That\n            // way we handle calling loaders above the boundary etc.  It's not really\n            // different from an actionError in that sense.\n            pendingError = _defineProperty({}, findNearestBoundary(matches).route.id, opts.pendingError);\n            _context3.next = 35;\n            break;\n          case 24:\n            if (!(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n              _context3.next = 35;\n              break;\n            }\n            _context3.next = 27;\n            return handleAction(request, location, opts.submission, matches, {\n              replace: opts.replace\n            });\n          case 27:\n            actionOutput = _context3.sent;\n            if (!actionOutput.shortCircuited) {\n              _context3.next = 30;\n              break;\n            }\n            return _context3.abrupt(\"return\");\n          case 30:\n            pendingActionData = actionOutput.pendingActionData;\n            pendingError = actionOutput.pendingActionError;\n            navigation = _extends({\n              state: \"loading\",\n              location: location\n            }, opts.submission);\n            loadingNavigation = navigation;\n            // Create a GET request for the loaders\n            request = new Request(request.url, {\n              signal: request.signal\n            });\n          case 35:\n            _context3.next = 37;\n            return handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, pendingActionData, pendingError);\n          case 37:\n            _yield$handleLoaders = _context3.sent;\n            shortCircuited = _yield$handleLoaders.shortCircuited;\n            loaderData = _yield$handleLoaders.loaderData;\n            errors = _yield$handleLoaders.errors;\n            if (!shortCircuited) {\n              _context3.next = 43;\n              break;\n            }\n            return _context3.abrupt(\"return\");\n          case 43:\n            // Clean up now that the action/loaders have completed.  Don't clean up if\n            // we short circuited because pendingNavigationController will have already\n            // been assigned to a new controller for the next navigation\n            pendingNavigationController = null;\n            completeNavigation(location, _extends({\n              matches: matches\n            }, pendingActionData ? {\n              actionData: pendingActionData\n            } : {}, {\n              loaderData: loaderData,\n              errors: errors\n            }));\n          case 45:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }));\n    return _startNavigation.apply(this, arguments);\n  }\n  function handleAction(_x7, _x8, _x9, _x10, _x11) {\n    return _handleAction.apply(this, arguments);\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  function _handleAction() {\n    _handleAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(request, location, submission, matches, opts) {\n      var navigation, result, actionMatch, replace, boundaryMatch;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            interruptActiveLoads();\n            // Put us in a submitting state\n            navigation = _extends({\n              state: \"submitting\",\n              location: location\n            }, submission);\n            updateState({\n              navigation: navigation\n            });\n            // Call our action and get the result\n            actionMatch = getTargetMatch(matches, location);\n            if (!(!actionMatch.route.action && !actionMatch.route.lazy)) {\n              _context4.next = 8;\n              break;\n            }\n            result = {\n              type: ResultType.error,\n              error: getInternalRouterError(405, {\n                method: request.method,\n                pathname: location.pathname,\n                routeId: actionMatch.route.id\n              })\n            };\n            _context4.next = 13;\n            break;\n          case 8:\n            _context4.next = 10;\n            return callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename);\n          case 10:\n            result = _context4.sent;\n            if (!request.signal.aborted) {\n              _context4.next = 13;\n              break;\n            }\n            return _context4.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 13:\n            if (!isRedirectResult(result)) {\n              _context4.next = 18;\n              break;\n            }\n            if (opts && opts.replace != null) {\n              replace = opts.replace;\n            } else {\n              // If the user didn't explicity indicate replace behavior, replace if\n              // we redirected to the exact same location we're currently at to avoid\n              // double back-buttons\n              replace = result.location === state.location.pathname + state.location.search;\n            }\n            _context4.next = 17;\n            return startRedirectNavigation(state, result, {\n              submission: submission,\n              replace: replace\n            });\n          case 17:\n            return _context4.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 18:\n            if (!isErrorResult(result)) {\n              _context4.next = 22;\n              break;\n            }\n            // Store off the pending error - we use it to determine which loaders\n            // to call and will commit it when we complete the navigation\n            boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n            // action threw an error that'll be rendered in an errorElement, we fall\n            // back to PUSH so that the user can use the back button to get back to\n            // the pre-submission form location to try again\n            if ((opts && opts.replace) !== true) {\n              pendingAction = Action.Push;\n            }\n            return _context4.abrupt(\"return\", {\n              // Send back an empty object we can use to clear out any prior actionData\n              pendingActionData: {},\n              pendingActionError: _defineProperty({}, boundaryMatch.route.id, result.error)\n            });\n          case 22:\n            if (!isDeferredResult(result)) {\n              _context4.next = 24;\n              break;\n            }\n            throw getInternalRouterError(400, {\n              type: \"defer-action\"\n            });\n          case 24:\n            return _context4.abrupt(\"return\", {\n              pendingActionData: _defineProperty({}, actionMatch.route.id, result.data)\n            });\n          case 25:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4);\n    }));\n    return _handleAction.apply(this, arguments);\n  }\n  function handleLoaders(_x12, _x13, _x14, _x15, _x16, _x17, _x18, _x19, _x20) {\n    return _handleLoaders.apply(this, arguments);\n  }\n  function _handleLoaders() {\n    _handleLoaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, pendingActionData, pendingError) {\n      var loadingNavigation, navigation, activeSubmission, routesToUse, _getMatchesToLoad, _getMatchesToLoad2, matchesToLoad, revalidatingFetchers, _updatedFetchers, actionData, abortPendingFetchRevalidations, _yield$callLoadersAnd, results, loaderResults, fetcherResults, redirect, _processLoaderData, loaderData, errors, updatedFetchers, didAbortFetchLoads, shouldUpdateFetchers;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            // Figure out the right navigation we want to use for data loading\n            loadingNavigation = overrideNavigation;\n            if (!loadingNavigation) {\n              navigation = _extends({\n                state: \"loading\",\n                location: location,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined\n              }, submission);\n              loadingNavigation = navigation;\n            }\n            // If this was a redirect from an action we don't have a \"submission\" but\n            // we have it on the loading navigation so use that if available\n            activeSubmission = submission || fetcherSubmission ? submission || fetcherSubmission : loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {\n              formMethod: loadingNavigation.formMethod,\n              formAction: loadingNavigation.formAction,\n              formData: loadingNavigation.formData,\n              formEncType: loadingNavigation.formEncType\n            } : undefined;\n            routesToUse = inFlightDataRoutes || dataRoutes;\n            _getMatchesToLoad = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, pendingActionData, pendingError), _getMatchesToLoad2 = _slicedToArray(_getMatchesToLoad, 2), matchesToLoad = _getMatchesToLoad2[0], revalidatingFetchers = _getMatchesToLoad2[1]; // Cancel pending deferreds for no-longer-matched routes or routes we're\n            // about to reload.  Note that if this is an action reload we would have\n            // already cancelled all pending deferreds so this would be a no-op\n            cancelActiveDeferreds(function (routeId) {\n              return !(matches && matches.some(function (m) {\n                return m.route.id === routeId;\n              })) || matchesToLoad && matchesToLoad.some(function (m) {\n                return m.route.id === routeId;\n              });\n            });\n            // Short circuit if we have no loaders to run\n            if (!(matchesToLoad.length === 0 && revalidatingFetchers.length === 0)) {\n              _context5.next = 10;\n              break;\n            }\n            _updatedFetchers = markFetchRedirectsDone();\n            completeNavigation(location, _extends({\n              matches: matches,\n              loaderData: {},\n              // Commit pending error if we're short circuiting\n              errors: pendingError || null\n            }, pendingActionData ? {\n              actionData: pendingActionData\n            } : {}, _updatedFetchers ? {\n              fetchers: new Map(state.fetchers)\n            } : {}));\n            return _context5.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 10:\n            // If this is an uninterrupted revalidation, we remain in our current idle\n            // state.  If not, we need to switch to our loading state and load data,\n            // preserving any new action data or existing action data (in the case of\n            // a revalidation interrupting an actionReload)\n            if (!isUninterruptedRevalidation) {\n              revalidatingFetchers.forEach(function (rf) {\n                var fetcher = state.fetchers.get(rf.key);\n                var revalidatingFetcher = {\n                  state: \"loading\",\n                  data: fetcher && fetcher.data,\n                  formMethod: undefined,\n                  formAction: undefined,\n                  formEncType: undefined,\n                  formData: undefined,\n                  \" _hasFetcherDoneAnything \": true\n                };\n                state.fetchers.set(rf.key, revalidatingFetcher);\n              });\n              actionData = pendingActionData || state.actionData;\n              updateState(_extends({\n                navigation: loadingNavigation\n              }, actionData ? Object.keys(actionData).length === 0 ? {\n                actionData: null\n              } : {\n                actionData: actionData\n              } : {}, revalidatingFetchers.length > 0 ? {\n                fetchers: new Map(state.fetchers)\n              } : {}));\n            }\n            pendingNavigationLoadId = ++incrementingLoadId;\n            revalidatingFetchers.forEach(function (rf) {\n              if (rf.controller) {\n                // Fetchers use an independent AbortController so that aborting a fetcher\n                // (via deleteFetcher) does not abort the triggering navigation that\n                // triggered the revalidation\n                fetchControllers.set(rf.key, rf.controller);\n              }\n            });\n            // Proxy navigation abort through to revalidation fetchers\n            abortPendingFetchRevalidations = function abortPendingFetchRevalidations() {\n              return revalidatingFetchers.forEach(function (f) {\n                return abortFetcher(f.key);\n              });\n            };\n            if (pendingNavigationController) {\n              pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n            }\n            _context5.next = 17;\n            return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n          case 17:\n            _yield$callLoadersAnd = _context5.sent;\n            results = _yield$callLoadersAnd.results;\n            loaderResults = _yield$callLoadersAnd.loaderResults;\n            fetcherResults = _yield$callLoadersAnd.fetcherResults;\n            if (!request.signal.aborted) {\n              _context5.next = 23;\n              break;\n            }\n            return _context5.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 23:\n            // Clean up _after_ loaders have completed.  Don't clean up if we short\n            // circuited because fetchControllers would have been aborted and\n            // reassigned to new controllers for the next navigation\n            if (pendingNavigationController) {\n              pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n            }\n            revalidatingFetchers.forEach(function (rf) {\n              return fetchControllers.delete(rf.key);\n            });\n            // If any loaders returned a redirect Response, start a new REPLACE navigation\n            redirect = findRedirect(results);\n            if (!redirect) {\n              _context5.next = 30;\n              break;\n            }\n            _context5.next = 29;\n            return startRedirectNavigation(state, redirect, {\n              replace: replace\n            });\n          case 29:\n            return _context5.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 30:\n            // Process and commit output from loaders\n            _processLoaderData = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData.loaderData, errors = _processLoaderData.errors; // Wire up subscribers to update loaderData as promises settle\n            activeDeferreds.forEach(function (deferredData, routeId) {\n              deferredData.subscribe(function (aborted) {\n                // Note: No need to updateState here since the TrackedPromise on\n                // loaderData is stable across resolve/reject\n                // Remove this instance if we were aborted or if promises have settled\n                if (aborted || deferredData.done) {\n                  activeDeferreds.delete(routeId);\n                }\n              });\n            });\n            updatedFetchers = markFetchRedirectsDone();\n            didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n            shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n            return _context5.abrupt(\"return\", _extends({\n              loaderData: loaderData,\n              errors: errors\n            }, shouldUpdateFetchers ? {\n              fetchers: new Map(state.fetchers)\n            } : {}));\n          case 36:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5);\n    }));\n    return _handleLoaders.apply(this, arguments);\n  }\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    var routesToUse = inFlightDataRoutes || dataRoutes;\n    var normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, routeId, opts == null ? void 0 : opts.relative);\n    var matches = matchRoutes(routesToUse, normalizedPath, basename);\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }));\n      return;\n    }\n    var _normalizeNavigateOpt = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts),\n      path = _normalizeNavigateOpt.path,\n      submission = _normalizeNavigateOpt.submission;\n    var match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId: routeId,\n      path: path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  function handleFetcherAction(_x21, _x22, _x23, _x24, _x25, _x26) {\n    return _handleFetcherAction.apply(this, arguments);\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  function _handleFetcherAction() {\n    _handleFetcherAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(key, routeId, path, match, requestMatches, submission) {\n      var _error2, existingFetcher, fetcher, abortController, fetchRequest, actionResult, loadingFetcher, nextLocation, revalidationRequest, routesToUse, matches, loadId, loadFetcher, _getMatchesToLoad3, _getMatchesToLoad4, matchesToLoad, revalidatingFetchers, abortPendingFetchRevalidations, _yield$callLoadersAnd2, results, loaderResults, fetcherResults, redirect, _processLoaderData2, loaderData, errors, doneFetcher, didAbortFetchLoads;\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) switch (_context6.prev = _context6.next) {\n          case 0:\n            interruptActiveLoads();\n            fetchLoadMatches.delete(key);\n            if (!(!match.route.action && !match.route.lazy)) {\n              _context6.next = 6;\n              break;\n            }\n            _error2 = getInternalRouterError(405, {\n              method: submission.formMethod,\n              pathname: path,\n              routeId: routeId\n            });\n            setFetcherError(key, routeId, _error2);\n            return _context6.abrupt(\"return\");\n          case 6:\n            // Put this fetcher into it's submitting state\n            existingFetcher = state.fetchers.get(key);\n            fetcher = _extends({\n              state: \"submitting\"\n            }, submission, {\n              data: existingFetcher && existingFetcher.data,\n              \" _hasFetcherDoneAnything \": true\n            });\n            state.fetchers.set(key, fetcher);\n            updateState({\n              fetchers: new Map(state.fetchers)\n            });\n            // Call the action for the fetcher\n            abortController = new AbortController();\n            fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n            fetchControllers.set(key, abortController);\n            _context6.next = 15;\n            return callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename);\n          case 15:\n            actionResult = _context6.sent;\n            if (!fetchRequest.signal.aborted) {\n              _context6.next = 19;\n              break;\n            }\n            // We can delete this so long as we weren't aborted by ou our own fetcher\n            // re-submit which would have put _new_ controller is in fetchControllers\n            if (fetchControllers.get(key) === abortController) {\n              fetchControllers.delete(key);\n            }\n            return _context6.abrupt(\"return\");\n          case 19:\n            if (!isRedirectResult(actionResult)) {\n              _context6.next = 26;\n              break;\n            }\n            fetchControllers.delete(key);\n            fetchRedirectIds.add(key);\n            loadingFetcher = _extends({\n              state: \"loading\"\n            }, submission, {\n              data: undefined,\n              \" _hasFetcherDoneAnything \": true\n            });\n            state.fetchers.set(key, loadingFetcher);\n            updateState({\n              fetchers: new Map(state.fetchers)\n            });\n            return _context6.abrupt(\"return\", startRedirectNavigation(state, actionResult, {\n              submission: submission,\n              isFetchActionRedirect: true\n            }));\n          case 26:\n            if (!isErrorResult(actionResult)) {\n              _context6.next = 29;\n              break;\n            }\n            setFetcherError(key, routeId, actionResult.error);\n            return _context6.abrupt(\"return\");\n          case 29:\n            if (!isDeferredResult(actionResult)) {\n              _context6.next = 31;\n              break;\n            }\n            throw getInternalRouterError(400, {\n              type: \"defer-action\"\n            });\n          case 31:\n            // Start the data load for current matches, or the next location if we're\n            // in the middle of a navigation\n            nextLocation = state.navigation.location || state.location;\n            revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n            routesToUse = inFlightDataRoutes || dataRoutes;\n            matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n            invariant(matches, \"Didn't find any matches after fetcher action\");\n            loadId = ++incrementingLoadId;\n            fetchReloadIds.set(key, loadId);\n            loadFetcher = _extends({\n              state: \"loading\",\n              data: actionResult.data\n            }, submission, {\n              \" _hasFetcherDoneAnything \": true\n            });\n            state.fetchers.set(key, loadFetcher);\n            _getMatchesToLoad3 = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, _defineProperty({}, match.route.id, actionResult.data), undefined // No need to send through errors since we short circuit above\n            ), _getMatchesToLoad4 = _slicedToArray(_getMatchesToLoad3, 2), matchesToLoad = _getMatchesToLoad4[0], revalidatingFetchers = _getMatchesToLoad4[1]; // Put all revalidating fetchers into the loading state, except for the\n            // current fetcher which we want to keep in it's current loading state which\n            // contains it's action submission info + action data\n            revalidatingFetchers.filter(function (rf) {\n              return rf.key !== key;\n            }).forEach(function (rf) {\n              var staleKey = rf.key;\n              var existingFetcher = state.fetchers.get(staleKey);\n              var revalidatingFetcher = {\n                state: \"loading\",\n                data: existingFetcher && existingFetcher.data,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined,\n                \" _hasFetcherDoneAnything \": true\n              };\n              state.fetchers.set(staleKey, revalidatingFetcher);\n              if (rf.controller) {\n                fetchControllers.set(staleKey, rf.controller);\n              }\n            });\n            updateState({\n              fetchers: new Map(state.fetchers)\n            });\n            abortPendingFetchRevalidations = function abortPendingFetchRevalidations() {\n              return revalidatingFetchers.forEach(function (rf) {\n                return abortFetcher(rf.key);\n              });\n            };\n            abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n            _context6.next = 47;\n            return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n          case 47:\n            _yield$callLoadersAnd2 = _context6.sent;\n            results = _yield$callLoadersAnd2.results;\n            loaderResults = _yield$callLoadersAnd2.loaderResults;\n            fetcherResults = _yield$callLoadersAnd2.fetcherResults;\n            if (!abortController.signal.aborted) {\n              _context6.next = 53;\n              break;\n            }\n            return _context6.abrupt(\"return\");\n          case 53:\n            abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n            fetchReloadIds.delete(key);\n            fetchControllers.delete(key);\n            revalidatingFetchers.forEach(function (r) {\n              return fetchControllers.delete(r.key);\n            });\n            redirect = findRedirect(results);\n            if (!redirect) {\n              _context6.next = 60;\n              break;\n            }\n            return _context6.abrupt(\"return\", startRedirectNavigation(state, redirect));\n          case 60:\n            // Process and commit output from loaders\n            _processLoaderData2 = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData2.loaderData, errors = _processLoaderData2.errors; // Since we let revalidations complete even if the submitting fetcher was\n            // deleted, only put it back to idle if it hasn't been deleted\n            if (state.fetchers.has(key)) {\n              doneFetcher = {\n                state: \"idle\",\n                data: actionResult.data,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined,\n                \" _hasFetcherDoneAnything \": true\n              };\n              state.fetchers.set(key, doneFetcher);\n            }\n            didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n            // more recent than the navigation, we want the newer data so abort the\n            // navigation and complete it with the fetcher data\n            if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n              invariant(pendingAction, \"Expected pending action\");\n              pendingNavigationController && pendingNavigationController.abort();\n              completeNavigation(state.navigation.location, {\n                matches: matches,\n                loaderData: loaderData,\n                errors: errors,\n                fetchers: new Map(state.fetchers)\n              });\n            } else {\n              // otherwise just update with the fetcher data, preserving any existing\n              // loaderData for loaders that did not need to reload.  We have to\n              // manually merge here since we aren't going through completeNavigation\n              updateState(_extends({\n                errors: errors,\n                loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n              }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n                fetchers: new Map(state.fetchers)\n              } : {}));\n              isRevalidationRequired = false;\n            }\n          case 64:\n          case \"end\":\n            return _context6.stop();\n        }\n      }, _callee6);\n    }));\n    return _handleFetcherAction.apply(this, arguments);\n  }\n  function handleFetcherLoader(_x27, _x28, _x29, _x30, _x31, _x32) {\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  function _handleFetcherLoader() {\n    _handleFetcherLoader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(key, routeId, path, match, matches, submission) {\n      var existingFetcher, loadingFetcher, abortController, fetchRequest, result, boundaryMatch, doneFetcher;\n      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) switch (_context7.prev = _context7.next) {\n          case 0:\n            existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n            loadingFetcher = _extends({\n              state: \"loading\",\n              formMethod: undefined,\n              formAction: undefined,\n              formEncType: undefined,\n              formData: undefined\n            }, submission, {\n              data: existingFetcher && existingFetcher.data,\n              \" _hasFetcherDoneAnything \": true\n            });\n            state.fetchers.set(key, loadingFetcher);\n            updateState({\n              fetchers: new Map(state.fetchers)\n            });\n            // Call the loader for this fetcher route match\n            abortController = new AbortController();\n            fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n            fetchControllers.set(key, abortController);\n            _context7.next = 9;\n            return callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, mapRouteProperties, basename);\n          case 9:\n            result = _context7.sent;\n            if (!isDeferredResult(result)) {\n              _context7.next = 17;\n              break;\n            }\n            _context7.next = 13;\n            return resolveDeferredData(result, fetchRequest.signal, true);\n          case 13:\n            _context7.t0 = _context7.sent;\n            if (_context7.t0) {\n              _context7.next = 16;\n              break;\n            }\n            _context7.t0 = result;\n          case 16:\n            result = _context7.t0;\n          case 17:\n            // We can delete this so long as we weren't aborted by our our own fetcher\n            // re-load which would have put _new_ controller is in fetchControllers\n            if (fetchControllers.get(key) === abortController) {\n              fetchControllers.delete(key);\n            }\n            if (!fetchRequest.signal.aborted) {\n              _context7.next = 20;\n              break;\n            }\n            return _context7.abrupt(\"return\");\n          case 20:\n            if (!isRedirectResult(result)) {\n              _context7.next = 25;\n              break;\n            }\n            fetchRedirectIds.add(key);\n            _context7.next = 24;\n            return startRedirectNavigation(state, result);\n          case 24:\n            return _context7.abrupt(\"return\");\n          case 25:\n            if (!isErrorResult(result)) {\n              _context7.next = 30;\n              break;\n            }\n            boundaryMatch = findNearestBoundary(state.matches, routeId);\n            state.fetchers.delete(key);\n            // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n            // do we need to behave any differently with our non-redirect errors?\n            // What if it was a non-redirect Response?\n            updateState({\n              fetchers: new Map(state.fetchers),\n              errors: _defineProperty({}, boundaryMatch.route.id, result.error)\n            });\n            return _context7.abrupt(\"return\");\n          case 30:\n            invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n            // Put the fetcher back into an idle state\n            doneFetcher = {\n              state: \"idle\",\n              data: result.data,\n              formMethod: undefined,\n              formAction: undefined,\n              formEncType: undefined,\n              formData: undefined,\n              \" _hasFetcherDoneAnything \": true\n            };\n            state.fetchers.set(key, doneFetcher);\n            updateState({\n              fetchers: new Map(state.fetchers)\n            });\n          case 34:\n          case \"end\":\n            return _context7.stop();\n        }\n      }, _callee7);\n    }));\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n  function startRedirectNavigation(_x33, _x34, _x35) {\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n  function _startRedirectNavigation() {\n    _startRedirectNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(state, redirect, _temp) {\n      var _ref6, submission, replace, isFetchActionRedirect, redirectLocation, url, isDifferentBasename, redirectHistoryAction, _state$navigation, formMethod, formAction, formEncType, formData;\n      return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n        while (1) switch (_context8.prev = _context8.next) {\n          case 0:\n            _ref6 = _temp === void 0 ? {} : _temp, submission = _ref6.submission, replace = _ref6.replace, isFetchActionRedirect = _ref6.isFetchActionRedirect;\n            if (redirect.revalidate) {\n              isRevalidationRequired = true;\n            }\n            redirectLocation = createLocation(state.location, redirect.location,\n            // TODO: This can be removed once we get rid of useTransition in Remix v2\n            _extends({\n              _isRedirect: true\n            }, isFetchActionRedirect ? {\n              _isFetchActionRedirect: true\n            } : {}));\n            invariant(redirectLocation, \"Expected a location on the redirect navigation\");\n            // Check if this an absolute external redirect that goes to a new origin\n            if (!(ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser)) {\n              _context8.next = 10;\n              break;\n            }\n            url = init.history.createURL(redirect.location);\n            isDifferentBasename = stripBasename(url.pathname, basename) == null;\n            if (!(routerWindow.location.origin !== url.origin || isDifferentBasename)) {\n              _context8.next = 10;\n              break;\n            }\n            if (replace) {\n              routerWindow.location.replace(redirect.location);\n            } else {\n              routerWindow.location.assign(redirect.location);\n            }\n            return _context8.abrupt(\"return\");\n          case 10:\n            // There's no need to abort on redirects, since we don't detect the\n            // redirect until the action/loaders have settled\n            pendingNavigationController = null;\n            redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n            // state.navigation\n            _state$navigation = state.navigation, formMethod = _state$navigation.formMethod, formAction = _state$navigation.formAction, formEncType = _state$navigation.formEncType, formData = _state$navigation.formData;\n            if (!submission && formMethod && formAction && formData && formEncType) {\n              submission = {\n                formMethod: formMethod,\n                formAction: formAction,\n                formEncType: formEncType,\n                formData: formData\n              };\n            }\n            // If this was a 307/308 submission we want to preserve the HTTP method and\n            // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n            // redirected location\n            if (!(redirectPreserveMethodStatusCodes.has(redirect.status) && submission && isMutationMethod(submission.formMethod))) {\n              _context8.next = 19;\n              break;\n            }\n            _context8.next = 17;\n            return startNavigation(redirectHistoryAction, redirectLocation, {\n              submission: _extends({}, submission, {\n                formAction: redirect.location\n              }),\n              // Preserve this flag across redirects\n              preventScrollReset: pendingPreventScrollReset\n            });\n          case 17:\n            _context8.next = 26;\n            break;\n          case 19:\n            if (!isFetchActionRedirect) {\n              _context8.next = 24;\n              break;\n            }\n            _context8.next = 22;\n            return startNavigation(redirectHistoryAction, redirectLocation, {\n              overrideNavigation: {\n                state: \"loading\",\n                location: redirectLocation,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined\n              },\n              fetcherSubmission: submission,\n              // Preserve this flag across redirects\n              preventScrollReset: pendingPreventScrollReset\n            });\n          case 22:\n            _context8.next = 26;\n            break;\n          case 24:\n            _context8.next = 26;\n            return startNavigation(redirectHistoryAction, redirectLocation, {\n              overrideNavigation: {\n                state: \"loading\",\n                location: redirectLocation,\n                formMethod: submission ? submission.formMethod : undefined,\n                formAction: submission ? submission.formAction : undefined,\n                formEncType: submission ? submission.formEncType : undefined,\n                formData: submission ? submission.formData : undefined\n              },\n              // Preserve this flag across redirects\n              preventScrollReset: pendingPreventScrollReset\n            });\n          case 26:\n          case \"end\":\n            return _context8.stop();\n        }\n      }, _callee8);\n    }));\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n  function callLoadersAndMaybeResolveData(_x36, _x37, _x38, _x39, _x40) {\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n  function _callLoadersAndMaybeResolveData() {\n    _callLoadersAndMaybeResolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n      var results, loaderResults, fetcherResults;\n      return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n        while (1) switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.next = 2;\n            return Promise.all([].concat(_toConsumableArray(matchesToLoad.map(function (match) {\n              return callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename);\n            })), _toConsumableArray(fetchersToLoad.map(function (f) {\n              if (f.matches && f.match && f.controller) {\n                return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename);\n              } else {\n                var _error3 = {\n                  type: ResultType.error,\n                  error: getInternalRouterError(404, {\n                    pathname: f.path\n                  })\n                };\n                return _error3;\n              }\n            }))));\n          case 2:\n            results = _context9.sent;\n            loaderResults = results.slice(0, matchesToLoad.length);\n            fetcherResults = results.slice(matchesToLoad.length);\n            _context9.next = 7;\n            return Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(function () {\n              return request.signal;\n            }), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(function (f) {\n              return f.match;\n            }), fetcherResults, fetchersToLoad.map(function (f) {\n              return f.controller ? f.controller.signal : null;\n            }), true)]);\n          case 7:\n            return _context9.abrupt(\"return\", {\n              results: results,\n              loaderResults: loaderResults,\n              fetcherResults: fetcherResults\n            });\n          case 8:\n          case \"end\":\n            return _context9.stop();\n        }\n      }, _callee9);\n    }));\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n  function interruptActiveLoads() {\n    var _cancelledDeferredRou;\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    (_cancelledDeferredRou = cancelledDeferredRoutes).push.apply(_cancelledDeferredRou, _toConsumableArray(cancelActiveDeferreds()));\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach(function (_, key) {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function setFetcherError(key, routeId, error) {\n    var boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: _defineProperty({}, boundaryMatch.route.id, error),\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function deleteFetcher(key) {\n    var fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n  function abortFetcher(key) {\n    var controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    var _iterator3 = _createForOfIteratorHelper(keys),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var key = _step3.value;\n        var fetcher = getFetcher(key);\n        var doneFetcher = {\n          state: \"idle\",\n          data: fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true\n        };\n        state.fetchers.set(key, doneFetcher);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n  function markFetchRedirectsDone() {\n    var doneKeys = [];\n    var updatedFetchers = false;\n    var _iterator4 = _createForOfIteratorHelper(fetchRedirectIds),\n      _step4;\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var key = _step4.value;\n        var fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          fetchRedirectIds.delete(key);\n          doneKeys.push(key);\n          updatedFetchers = true;\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    var yeetedKeys = [];\n    var _iterator5 = _createForOfIteratorHelper(fetchReloadIds),\n      _step5;\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var _step5$value = _slicedToArray(_step5.value, 2),\n          key = _step5$value[0],\n          id = _step5$value[1];\n        if (id < landedId) {\n          var fetcher = state.fetchers.get(key);\n          invariant(fetcher, \"Expected fetcher: \" + key);\n          if (fetcher.state === \"loading\") {\n            abortFetcher(key);\n            fetchReloadIds.delete(key);\n            yeetedKeys.push(key);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    var blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    var blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    state.blockers.set(key, newBlocker);\n    updateState({\n      blockers: new Map(state.blockers)\n    });\n  }\n  function shouldBlockNavigation(_ref2) {\n    var currentLocation = _ref2.currentLocation,\n      nextLocation = _ref2.nextLocation,\n      historyAction = _ref2.historyAction;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    var entries = Array.from(blockerFunctions.entries());\n    var _entries = _slicedToArray(entries[entries.length - 1], 2),\n      blockerKey = _entries[0],\n      blockerFunction = _entries[1];\n    var blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation: currentLocation,\n      nextLocation: nextLocation,\n      historyAction: historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function cancelActiveDeferreds(predicate) {\n    var cancelledRouteIds = [];\n    activeDeferreds.forEach(function (dfd, routeId) {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || function (location) {\n      return location.key;\n    };\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      var y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return function () {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      var userMatches = matches.map(function (m) {\n        return createUseMatchesMatch(m, state.loaderData);\n      });\n      var key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      var userMatches = matches.map(function (m) {\n        return createUseMatchesMatch(m, state.loaderData);\n      });\n      var key = getScrollRestorationKey(location, userMatches) || location.key;\n      var y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize: initialize,\n    subscribe: subscribe,\n    enableScrollRestoration: enableScrollRestoration,\n    navigate: navigate,\n    fetch: fetch,\n    revalidate: revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: function createHref(to) {\n      return init.history.createHref(to);\n    },\n    encodeLocation: function encodeLocation(to) {\n      return init.history.encodeLocation(to);\n    },\n    getFetcher: getFetcher,\n    deleteFetcher: deleteFetcher,\n    dispose: dispose,\n    getBlocker: getBlocker,\n    deleteBlocker: deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes: _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nvar UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  var manifest = {};\n  var basename = (opts ? opts.basename : null) || \"/\";\n  var mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    var detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = function mapRouteProperties(route) {\n      return {\n        hasErrorBoundary: detectErrorBoundary(route)\n      };\n    };\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  var dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  function query(_x41, _x42) {\n    return _query.apply(this, arguments);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  function _query() {\n    _query = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(request, _temp2) {\n      var _ref7, requestContext, url, method, location, matches, error, _getShortCircuitMatch3, methodNotAllowedMatches, route, _error4, _getShortCircuitMatch4, notFoundMatches, _route2, result;\n      return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n        while (1) switch (_context10.prev = _context10.next) {\n          case 0:\n            _ref7 = _temp2 === void 0 ? {} : _temp2, requestContext = _ref7.requestContext;\n            url = new URL(request.url);\n            method = request.method;\n            location = createLocation(\"\", createPath(url), null, \"default\");\n            matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n            if (!(!isValidMethod(method) && method !== \"HEAD\")) {\n              _context10.next = 11;\n              break;\n            }\n            error = getInternalRouterError(405, {\n              method: method\n            });\n            _getShortCircuitMatch3 = getShortCircuitMatches(dataRoutes), methodNotAllowedMatches = _getShortCircuitMatch3.matches, route = _getShortCircuitMatch3.route;\n            return _context10.abrupt(\"return\", {\n              basename: basename,\n              location: location,\n              matches: methodNotAllowedMatches,\n              loaderData: {},\n              actionData: null,\n              errors: _defineProperty({}, route.id, error),\n              statusCode: error.status,\n              loaderHeaders: {},\n              actionHeaders: {},\n              activeDeferreds: null\n            });\n          case 11:\n            if (matches) {\n              _context10.next = 15;\n              break;\n            }\n            _error4 = getInternalRouterError(404, {\n              pathname: location.pathname\n            });\n            _getShortCircuitMatch4 = getShortCircuitMatches(dataRoutes), notFoundMatches = _getShortCircuitMatch4.matches, _route2 = _getShortCircuitMatch4.route;\n            return _context10.abrupt(\"return\", {\n              basename: basename,\n              location: location,\n              matches: notFoundMatches,\n              loaderData: {},\n              actionData: null,\n              errors: _defineProperty({}, _route2.id, _error4),\n              statusCode: _error4.status,\n              loaderHeaders: {},\n              actionHeaders: {},\n              activeDeferreds: null\n            });\n          case 15:\n            _context10.next = 17;\n            return queryImpl(request, location, matches, requestContext);\n          case 17:\n            result = _context10.sent;\n            if (!isResponse(result)) {\n              _context10.next = 20;\n              break;\n            }\n            return _context10.abrupt(\"return\", result);\n          case 20:\n            return _context10.abrupt(\"return\", _extends({\n              location: location,\n              basename: basename\n            }, result));\n          case 21:\n          case \"end\":\n            return _context10.stop();\n        }\n      }, _callee10);\n    }));\n    return _query.apply(this, arguments);\n  }\n  function queryRoute(_x43, _x44) {\n    return _queryRoute.apply(this, arguments);\n  }\n  function _queryRoute() {\n    _queryRoute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(request, _temp3) {\n      var _ref8, routeId, requestContext, url, method, location, matches, match, result, error, _result$activeDeferre, data;\n      return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n        while (1) switch (_context11.prev = _context11.next) {\n          case 0:\n            _ref8 = _temp3 === void 0 ? {} : _temp3, routeId = _ref8.routeId, requestContext = _ref8.requestContext;\n            url = new URL(request.url);\n            method = request.method;\n            location = createLocation(\"\", createPath(url), null, \"default\");\n            matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n            if (!(!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\")) {\n              _context11.next = 9;\n              break;\n            }\n            throw getInternalRouterError(405, {\n              method: method\n            });\n          case 9:\n            if (matches) {\n              _context11.next = 11;\n              break;\n            }\n            throw getInternalRouterError(404, {\n              pathname: location.pathname\n            });\n          case 11:\n            match = routeId ? matches.find(function (m) {\n              return m.route.id === routeId;\n            }) : getTargetMatch(matches, location);\n            if (!(routeId && !match)) {\n              _context11.next = 16;\n              break;\n            }\n            throw getInternalRouterError(403, {\n              pathname: location.pathname,\n              routeId: routeId\n            });\n          case 16:\n            if (match) {\n              _context11.next = 18;\n              break;\n            }\n            throw getInternalRouterError(404, {\n              pathname: location.pathname\n            });\n          case 18:\n            _context11.next = 20;\n            return queryImpl(request, location, matches, requestContext, match);\n          case 20:\n            result = _context11.sent;\n            if (!isResponse(result)) {\n              _context11.next = 23;\n              break;\n            }\n            return _context11.abrupt(\"return\", result);\n          case 23:\n            error = result.errors ? Object.values(result.errors)[0] : undefined;\n            if (!(error !== undefined)) {\n              _context11.next = 26;\n              break;\n            }\n            throw error;\n          case 26:\n            if (!result.actionData) {\n              _context11.next = 28;\n              break;\n            }\n            return _context11.abrupt(\"return\", Object.values(result.actionData)[0]);\n          case 28:\n            if (!result.loaderData) {\n              _context11.next = 32;\n              break;\n            }\n            data = Object.values(result.loaderData)[0];\n            if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n              data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n            }\n            return _context11.abrupt(\"return\", data);\n          case 32:\n            return _context11.abrupt(\"return\", undefined);\n          case 33:\n          case \"end\":\n            return _context11.stop();\n        }\n      }, _callee11);\n    }));\n    return _queryRoute.apply(this, arguments);\n  }\n  function queryImpl(_x45, _x46, _x47, _x48, _x49) {\n    return _queryImpl.apply(this, arguments);\n  }\n  function _queryImpl() {\n    _queryImpl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(request, location, matches, requestContext, routeMatch) {\n      var _result, result;\n      return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n        while (1) switch (_context12.prev = _context12.next) {\n          case 0:\n            invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n            _context12.prev = 1;\n            if (!isMutationMethod(request.method.toLowerCase())) {\n              _context12.next = 7;\n              break;\n            }\n            _context12.next = 5;\n            return submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n          case 5:\n            _result = _context12.sent;\n            return _context12.abrupt(\"return\", _result);\n          case 7:\n            _context12.next = 9;\n            return loadRouteData(request, matches, requestContext, routeMatch);\n          case 9:\n            result = _context12.sent;\n            return _context12.abrupt(\"return\", isResponse(result) ? result : _extends({}, result, {\n              actionData: null,\n              actionHeaders: {}\n            }));\n          case 13:\n            _context12.prev = 13;\n            _context12.t0 = _context12[\"catch\"](1);\n            if (!isQueryRouteResponse(_context12.t0)) {\n              _context12.next = 19;\n              break;\n            }\n            if (!(_context12.t0.type === ResultType.error && !isRedirectResponse(_context12.t0.response))) {\n              _context12.next = 18;\n              break;\n            }\n            throw _context12.t0.response;\n          case 18:\n            return _context12.abrupt(\"return\", _context12.t0.response);\n          case 19:\n            if (!isRedirectResponse(_context12.t0)) {\n              _context12.next = 21;\n              break;\n            }\n            return _context12.abrupt(\"return\", _context12.t0);\n          case 21:\n            throw _context12.t0;\n          case 22:\n          case \"end\":\n            return _context12.stop();\n        }\n      }, _callee12, null, [[1, 13]]);\n    }));\n    return _queryImpl.apply(this, arguments);\n  }\n  function submit(_x50, _x51, _x52, _x53, _x54) {\n    return _submit.apply(this, arguments);\n  }\n  function _submit() {\n    _submit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(request, matches, actionMatch, requestContext, isRouteRequest) {\n      var result, error, method, _error5, boundaryMatch, _context13, loaderRequest, context;\n      return _regeneratorRuntime().wrap(function _callee13$(_context14) {\n        while (1) switch (_context14.prev = _context14.next) {\n          case 0:\n            if (!(!actionMatch.route.action && !actionMatch.route.lazy)) {\n              _context14.next = 7;\n              break;\n            }\n            error = getInternalRouterError(405, {\n              method: request.method,\n              pathname: new URL(request.url).pathname,\n              routeId: actionMatch.route.id\n            });\n            if (!isRouteRequest) {\n              _context14.next = 4;\n              break;\n            }\n            throw error;\n          case 4:\n            result = {\n              type: ResultType.error,\n              error: error\n            };\n            _context14.next = 13;\n            break;\n          case 7:\n            _context14.next = 9;\n            return callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, true, isRouteRequest, requestContext);\n          case 9:\n            result = _context14.sent;\n            if (!request.signal.aborted) {\n              _context14.next = 13;\n              break;\n            }\n            method = isRouteRequest ? \"queryRoute\" : \"query\";\n            throw new Error(method + \"() call aborted\");\n          case 13:\n            if (!isRedirectResult(result)) {\n              _context14.next = 15;\n              break;\n            }\n            throw new Response(null, {\n              status: result.status,\n              headers: {\n                Location: result.location\n              }\n            });\n          case 15:\n            if (!isDeferredResult(result)) {\n              _context14.next = 20;\n              break;\n            }\n            _error5 = getInternalRouterError(400, {\n              type: \"defer-action\"\n            });\n            if (!isRouteRequest) {\n              _context14.next = 19;\n              break;\n            }\n            throw _error5;\n          case 19:\n            result = {\n              type: ResultType.error,\n              error: _error5\n            };\n          case 20:\n            if (!isRouteRequest) {\n              _context14.next = 24;\n              break;\n            }\n            if (!isErrorResult(result)) {\n              _context14.next = 23;\n              break;\n            }\n            throw result.error;\n          case 23:\n            return _context14.abrupt(\"return\", {\n              matches: [actionMatch],\n              loaderData: {},\n              actionData: _defineProperty({}, actionMatch.route.id, result.data),\n              errors: null,\n              // Note: statusCode + headers are unused here since queryRoute will\n              // return the raw Response or value\n              statusCode: 200,\n              loaderHeaders: {},\n              actionHeaders: {},\n              activeDeferreds: null\n            });\n          case 24:\n            if (!isErrorResult(result)) {\n              _context14.next = 30;\n              break;\n            }\n            // Store off the pending error - we use it to determine which loaders\n            // to call and will commit it when we complete the navigation\n            boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n            _context14.next = 28;\n            return loadRouteData(request, matches, requestContext, undefined, _defineProperty({}, boundaryMatch.route.id, result.error));\n          case 28:\n            _context13 = _context14.sent;\n            return _context14.abrupt(\"return\", _extends({}, _context13, {\n              statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n              actionData: null,\n              actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n            }));\n          case 30:\n            // Create a GET request for the loaders\n            loaderRequest = new Request(request.url, {\n              headers: request.headers,\n              redirect: request.redirect,\n              signal: request.signal\n            });\n            _context14.next = 33;\n            return loadRouteData(loaderRequest, matches, requestContext);\n          case 33:\n            context = _context14.sent;\n            return _context14.abrupt(\"return\", _extends({}, context, result.statusCode ? {\n              statusCode: result.statusCode\n            } : {}, {\n              actionData: _defineProperty({}, actionMatch.route.id, result.data),\n              actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n            }));\n          case 35:\n          case \"end\":\n            return _context14.stop();\n        }\n      }, _callee13);\n    }));\n    return _submit.apply(this, arguments);\n  }\n  function loadRouteData(_x55, _x56, _x57, _x58, _x59) {\n    return _loadRouteData.apply(this, arguments);\n  }\n  function _loadRouteData() {\n    _loadRouteData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(request, matches, requestContext, routeMatch, pendingActionError) {\n      var isRouteRequest, requestMatches, matchesToLoad, results, method, activeDeferreds, context, executedLoaders;\n      return _regeneratorRuntime().wrap(function _callee14$(_context15) {\n        while (1) switch (_context15.prev = _context15.next) {\n          case 0:\n            isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n            if (!(isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy))) {\n              _context15.next = 3;\n              break;\n            }\n            throw getInternalRouterError(400, {\n              method: request.method,\n              pathname: new URL(request.url).pathname,\n              routeId: routeMatch == null ? void 0 : routeMatch.route.id\n            });\n          case 3:\n            requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n            matchesToLoad = requestMatches.filter(function (m) {\n              return m.route.loader || m.route.lazy;\n            }); // Short circuit if we have no loaders to run (query())\n            if (!(matchesToLoad.length === 0)) {\n              _context15.next = 7;\n              break;\n            }\n            return _context15.abrupt(\"return\", {\n              matches: matches,\n              // Add a null for all matched routes for proper revalidation on the client\n              loaderData: matches.reduce(function (acc, m) {\n                return Object.assign(acc, _defineProperty({}, m.route.id, null));\n              }, {}),\n              errors: pendingActionError || null,\n              statusCode: 200,\n              loaderHeaders: {},\n              activeDeferreds: null\n            });\n          case 7:\n            _context15.next = 9;\n            return Promise.all(_toConsumableArray(matchesToLoad.map(function (match) {\n              return callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, true, isRouteRequest, requestContext);\n            })));\n          case 9:\n            results = _context15.sent;\n            if (!request.signal.aborted) {\n              _context15.next = 13;\n              break;\n            }\n            method = isRouteRequest ? \"queryRoute\" : \"query\";\n            throw new Error(method + \"() call aborted\");\n          case 13:\n            // Process and commit output from loaders\n            activeDeferreds = new Map();\n            context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds); // Add a null for any non-loader matches for proper revalidation on the client\n            executedLoaders = new Set(matchesToLoad.map(function (match) {\n              return match.route.id;\n            }));\n            matches.forEach(function (match) {\n              if (!executedLoaders.has(match.route.id)) {\n                context.loaderData[match.route.id] = null;\n              }\n            });\n            return _context15.abrupt(\"return\", _extends({}, context, {\n              matches: matches,\n              activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n            }));\n          case 18:\n          case \"end\":\n            return _context15.stop();\n        }\n      }, _callee14);\n    }));\n    return _loadRouteData.apply(this, arguments);\n  }\n  return {\n    dataRoutes: dataRoutes,\n    query: query,\n    queryRoute: queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  var newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: _defineProperty({}, context._deepestRenderedBoundaryId || routes[0].id, error)\n  });\n  return newContext;\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && \"formData\" in opts;\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, fromRouteId, relative) {\n  var contextualMatches;\n  var activeRouteMatch;\n  if (fromRouteId != null && relative !== \"path\") {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route.  When using relative:path,\n    // fromRouteId is ignored since that is always relative to the current\n    // location path\n    contextualMatches = [];\n    var _iterator6 = _createForOfIteratorHelper(matches),\n      _step6;\n    try {\n      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n        var match = _step6.value;\n        contextualMatches.push(match);\n        if (match.route.id === fromRouteId) {\n          activeRouteMatch = match;\n          break;\n        }\n      }\n    } catch (err) {\n      _iterator6.e(err);\n    } finally {\n      _iterator6.f();\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  var path = resolveTo(to ? to : \".\", getPathContributingMatches(contextualMatches).map(function (m) {\n    return m.pathnameBase;\n  }), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Add an ?index param for matched index routes if we don't already have one\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path: path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path: path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  // Create a Submission on non-GET navigations\n  var submission;\n  if (opts.formData) {\n    var formMethod = opts.formMethod || \"get\";\n    submission = {\n      formMethod: normalizeFormMethod ? formMethod.toUpperCase() : formMethod.toLowerCase(),\n      formAction: stripHashFromPath(path),\n      formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n      formData: opts.formData\n    };\n    if (isMutationMethod(submission.formMethod)) {\n      return {\n        path: path,\n        submission: submission\n      };\n    }\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  var parsedPath = parsePath(path);\n  var searchParams = convertFormDataToSearchParams(opts.formData);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission: submission\n  };\n}\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  var boundaryMatches = matches;\n  if (boundaryId) {\n    var index = matches.findIndex(function (m) {\n      return m.route.id === boundaryId;\n    });\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, pendingActionData, pendingError) {\n  var actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  var currentUrl = history.createURL(state.location);\n  var nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  var boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  var boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  var navigationMatches = boundaryMatches.filter(function (match, index) {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(function (id) {\n      return id === match.route.id;\n    })) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    var currentRouteMatch = state.matches[index];\n    var nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl: currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl: nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult: actionResult,\n      defaultShouldRevalidate:\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired ||\n      // Clicked the same link, resubmitted a GET form\n      currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  var revalidatingFetchers = [];\n  fetchLoadMatches.forEach(function (f, key) {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some(function (m) {\n      return m.route.id === f.routeId;\n    })) {\n      return;\n    }\n    var fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key: key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    var fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push({\n        key: key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // hit a static href, so they _always_ check shouldRevalidate and the\n    // default is strictly if a revalidation is explicitly required (action\n    // submissions, useRevalidator, X-Remix-Revalidate).\n    var shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n      currentUrl: currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl: nextUrl,\n      nextParams: matches[matches.length - 1].params\n    }, submission, {\n      actionResult: actionResult,\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      defaultShouldRevalidate: isRevalidationRequired\n    }));\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key: key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  var isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  var isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  var currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    var routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nfunction loadLazyRouteModule(_x60, _x61, _x62) {\n  return _loadLazyRouteModule.apply(this, arguments);\n}\nfunction _loadLazyRouteModule() {\n  _loadLazyRouteModule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(route, mapRouteProperties, manifest) {\n    var lazyRoute, routeToUpdate, routeUpdates, lazyRouteProperty, staticRouteValue, isPropertyStaticallyDefined;\n    return _regeneratorRuntime().wrap(function _callee15$(_context16) {\n      while (1) switch (_context16.prev = _context16.next) {\n        case 0:\n          if (route.lazy) {\n            _context16.next = 2;\n            break;\n          }\n          return _context16.abrupt(\"return\");\n        case 2:\n          _context16.next = 4;\n          return route.lazy();\n        case 4:\n          lazyRoute = _context16.sent;\n          if (route.lazy) {\n            _context16.next = 7;\n            break;\n          }\n          return _context16.abrupt(\"return\");\n        case 7:\n          routeToUpdate = manifest[route.id];\n          invariant(routeToUpdate, \"No route found in manifest\");\n          // Update the route in place.  This should be safe because there's no way\n          // we could yet be sitting on this route as we can't get there without\n          // resolving lazy() first.\n          //\n          // This is different than the HMR \"update\" use-case where we may actively be\n          // on the route being updated.  The main concern boils down to \"does this\n          // mutation affect any ongoing navigations or any current state.matches\n          // values?\".  If not, it should be safe to update in place.\n          routeUpdates = {};\n          for (lazyRouteProperty in lazyRoute) {\n            staticRouteValue = routeToUpdate[lazyRouteProperty];\n            isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n            // This property isn't static since it should always be updated based\n            // on the route updates\n            lazyRouteProperty !== \"hasErrorBoundary\";\n            warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n            if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n              routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n            }\n          }\n          // Mutate the route with the provided updates.  Do this first so we pass\n          // the updated version to mapRouteProperties\n          Object.assign(routeToUpdate, routeUpdates);\n          // Mutate the `hasErrorBoundary` property on the route based on the route\n          // updates and remove the `lazy` function so we don't resolve the lazy\n          // route again.\n          Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n            lazy: undefined\n          }));\n        case 13:\n        case \"end\":\n          return _context16.stop();\n      }\n    }, _callee15);\n  }));\n  return _loadLazyRouteModule.apply(this, arguments);\n}\nfunction callLoaderOrAction(_x63, _x64, _x65, _x66, _x67, _x68, _x69, _x70, _x71, _x72) {\n  return _callLoaderOrAction.apply(this, arguments);\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction _callLoaderOrAction() {\n  _callLoaderOrAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(type, request, match, matches, manifest, mapRouteProperties, basename, isStaticRequest, isRouteRequest, requestContext) {\n    var resultType, result, onReject, runHandler, handler, values, url, pathname, _url, _pathname, status, location, currentUrl, _url2, isSameBasename, data, contentType, _result$init, _result$init2;\n    return _regeneratorRuntime().wrap(function _callee16$(_context17) {\n      while (1) switch (_context17.prev = _context17.next) {\n        case 0:\n          if (isStaticRequest === void 0) {\n            isStaticRequest = false;\n          }\n          if (isRouteRequest === void 0) {\n            isRouteRequest = false;\n          }\n          runHandler = function runHandler(handler) {\n            // Setup a promise we can race against so that abort signals short circuit\n            var reject;\n            var abortPromise = new Promise(function (_, r) {\n              return reject = r;\n            });\n            onReject = function onReject() {\n              return reject();\n            };\n            request.signal.addEventListener(\"abort\", onReject);\n            return Promise.race([handler({\n              request: request,\n              params: match.params,\n              context: requestContext\n            }), abortPromise]);\n          };\n          _context17.prev = 3;\n          handler = match.route[type];\n          if (!match.route.lazy) {\n            _context17.next = 31;\n            break;\n          }\n          if (!handler) {\n            _context17.next = 13;\n            break;\n          }\n          _context17.next = 9;\n          return Promise.all([runHandler(handler), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n        case 9:\n          values = _context17.sent;\n          result = values[0];\n          _context17.next = 29;\n          break;\n        case 13:\n          _context17.next = 15;\n          return loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        case 15:\n          handler = match.route[type];\n          if (!handler) {\n            _context17.next = 22;\n            break;\n          }\n          _context17.next = 19;\n          return runHandler(handler);\n        case 19:\n          result = _context17.sent;\n          _context17.next = 29;\n          break;\n        case 22:\n          if (!(type === \"action\")) {\n            _context17.next = 28;\n            break;\n          }\n          url = new URL(request.url);\n          pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname: pathname,\n            routeId: match.route.id\n          });\n        case 28:\n          return _context17.abrupt(\"return\", {\n            type: ResultType.data,\n            data: undefined\n          });\n        case 29:\n          _context17.next = 40;\n          break;\n        case 31:\n          if (handler) {\n            _context17.next = 37;\n            break;\n          }\n          _url = new URL(request.url);\n          _pathname = _url.pathname + _url.search;\n          throw getInternalRouterError(404, {\n            pathname: _pathname\n          });\n        case 37:\n          _context17.next = 39;\n          return runHandler(handler);\n        case 39:\n          result = _context17.sent;\n        case 40:\n          invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n          _context17.next = 47;\n          break;\n        case 43:\n          _context17.prev = 43;\n          _context17.t0 = _context17[\"catch\"](3);\n          resultType = ResultType.error;\n          result = _context17.t0;\n        case 47:\n          _context17.prev = 47;\n          if (onReject) {\n            request.signal.removeEventListener(\"abort\", onReject);\n          }\n          return _context17.finish(47);\n        case 50:\n          if (!isResponse(result)) {\n            _context17.next = 75;\n            break;\n          }\n          status = result.status; // Process redirects\n          if (!redirectStatusCodes.has(status)) {\n            _context17.next = 60;\n            break;\n          }\n          location = result.headers.get(\"Location\");\n          invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n          // Support relative routing in internal redirects\n          if (!ABSOLUTE_URL_REGEX.test(location)) {\n            location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location);\n          } else if (!isStaticRequest) {\n            // Strip off the protocol+origin for same-origin + same-basename absolute\n            // redirects. If this is a static request, we can let it go back to the\n            // browser as-is\n            currentUrl = new URL(request.url);\n            _url2 = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n            isSameBasename = stripBasename(_url2.pathname, basename) != null;\n            if (_url2.origin === currentUrl.origin && isSameBasename) {\n              location = _url2.pathname + _url2.search + _url2.hash;\n            }\n          }\n          // Don't process redirects in the router during static requests requests.\n          // Instead, throw the Response and let the server handle it with an HTTP\n          // redirect.  We also update the Location header in place in this flow so\n          // basename and relative routing is taken into account\n          if (!isStaticRequest) {\n            _context17.next = 59;\n            break;\n          }\n          result.headers.set(\"Location\", location);\n          throw result;\n        case 59:\n          return _context17.abrupt(\"return\", {\n            type: ResultType.redirect,\n            status: status,\n            location: location,\n            revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n          });\n        case 60:\n          if (!isRouteRequest) {\n            _context17.next = 62;\n            break;\n          }\n          throw {\n            type: resultType || ResultType.data,\n            response: result\n          };\n        case 62:\n          contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n          // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n          if (!(contentType && /\\bapplication\\/json\\b/.test(contentType))) {\n            _context17.next = 69;\n            break;\n          }\n          _context17.next = 66;\n          return result.json();\n        case 66:\n          data = _context17.sent;\n          _context17.next = 72;\n          break;\n        case 69:\n          _context17.next = 71;\n          return result.text();\n        case 71:\n          data = _context17.sent;\n        case 72:\n          if (!(resultType === ResultType.error)) {\n            _context17.next = 74;\n            break;\n          }\n          return _context17.abrupt(\"return\", {\n            type: resultType,\n            error: new ErrorResponse(status, result.statusText, data),\n            headers: result.headers\n          });\n        case 74:\n          return _context17.abrupt(\"return\", {\n            type: ResultType.data,\n            data: data,\n            statusCode: result.status,\n            headers: result.headers\n          });\n        case 75:\n          if (!(resultType === ResultType.error)) {\n            _context17.next = 77;\n            break;\n          }\n          return _context17.abrupt(\"return\", {\n            type: resultType,\n            error: result\n          });\n        case 77:\n          if (!isDeferredData(result)) {\n            _context17.next = 79;\n            break;\n          }\n          return _context17.abrupt(\"return\", {\n            type: ResultType.deferred,\n            deferredData: result,\n            statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n            headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n          });\n        case 79:\n          return _context17.abrupt(\"return\", {\n            type: ResultType.data,\n            data: result\n          });\n        case 80:\n        case \"end\":\n          return _context17.stop();\n      }\n    }, _callee16, null, [[3, 43, 47, 50]]);\n  }));\n  return _callLoaderOrAction.apply(this, arguments);\n}\nfunction createClientSideRequest(history, location, signal, submission) {\n  var url = history.createURL(stripHashFromPath(location)).toString();\n  var init = {\n    signal: signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    var formMethod = submission.formMethod,\n      formEncType = submission.formEncType,\n      formData = submission.formData;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  }\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  var searchParams = new URLSearchParams();\n  var _iterator7 = _createForOfIteratorHelper(formData.entries()),\n    _step7;\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var _step7$value = _slicedToArray(_step7.value, 2),\n        key = _step7$value[0],\n        value = _step7$value[1];\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n      searchParams.append(key, value instanceof File ? value.name : value);\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n  return searchParams;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  var loaderData = {};\n  var errors = null;\n  var statusCode;\n  var foundError = false;\n  var loaderHeaders = {};\n  // Process loader results into state.loaderData/state.errors\n  results.forEach(function (result, index) {\n    var id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      var boundaryMatch = findNearestBoundary(matches, id);\n      var error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n  return {\n    loaderData: loaderData,\n    errors: errors,\n    statusCode: statusCode || 200,\n    loaderHeaders: loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  var _processRouteLoaderDa = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds),\n    loaderData = _processRouteLoaderDa.loaderData,\n    errors = _processRouteLoaderDa.errors;\n  // Process results from our revalidating fetchers\n  for (var index = 0; index < revalidatingFetchers.length; index++) {\n    var _revalidatingFetchers = revalidatingFetchers[index],\n      key = _revalidatingFetchers.key,\n      match = _revalidatingFetchers.match,\n      controller = _revalidatingFetchers.controller;\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    var result = fetcherResults[index];\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      var boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, _defineProperty({}, boundaryMatch.route.id, result.error));\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      var doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData: loaderData,\n    errors: errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  var mergedLoaderData = _extends({}, newLoaderData);\n  var _iterator8 = _createForOfIteratorHelper(matches),\n    _step8;\n  try {\n    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n      var match = _step8.value;\n      var id = match.route.id;\n      if (newLoaderData.hasOwnProperty(id)) {\n        if (newLoaderData[id] !== undefined) {\n          mergedLoaderData[id] = newLoaderData[id];\n        }\n      } else if (loaderData[id] !== undefined && match.route.loader) {\n        // Preserve existing keys not included in newLoaderData and where a loader\n        // wasn't removed by HMR\n        mergedLoaderData[id] = loaderData[id];\n      }\n      if (errors && errors.hasOwnProperty(id)) {\n        // Don't keep any loader data below the boundary\n        break;\n      }\n    }\n  } catch (err) {\n    _iterator8.e(err);\n  } finally {\n    _iterator8.f();\n  }\n  return mergedLoaderData;\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  var eligibleMatches = routeId ? matches.slice(0, matches.findIndex(function (m) {\n    return m.route.id === routeId;\n  }) + 1) : _toConsumableArray(matches);\n  return eligibleMatches.reverse().find(function (m) {\n    return m.route.hasErrorBoundary === true;\n  }) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  var route = routes.find(function (r) {\n    return r.index || !r.path || r.path === \"/\";\n  }) || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route: route\n    }],\n    route: route\n  };\n}\nfunction getInternalRouterError(status, _temp4) {\n  var _ref11 = _temp4 === void 0 ? {} : _temp4,\n    pathname = _ref11.pathname,\n    routeId = _ref11.routeId,\n    method = _ref11.method,\n    type = _ref11.type;\n  var statusText = \"Unknown Server Error\";\n  var errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  for (var i = results.length - 1; i >= 0; i--) {\n    var result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  var parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDeferredData(value) {\n  var deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  var status = result.status;\n  var location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nfunction resolveDeferredResults(_x73, _x74, _x75, _x76, _x77, _x78) {\n  return _resolveDeferredResults.apply(this, arguments);\n}\nfunction _resolveDeferredResults() {\n  _resolveDeferredResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n    var _loop, index, _ret;\n    return _regeneratorRuntime().wrap(function _callee17$(_context19) {\n      while (1) switch (_context19.prev = _context19.next) {\n        case 0:\n          _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop(index) {\n            var result, match, currentMatch, isRevalidatingLoader, signal;\n            return _regeneratorRuntime().wrap(function _loop$(_context18) {\n              while (1) switch (_context18.prev = _context18.next) {\n                case 0:\n                  result = results[index];\n                  match = matchesToLoad[index]; // If we don't have a match, then we can have a deferred result to do\n                  // anything with.  This is for revalidating fetchers where the route was\n                  // removed during HMR\n                  if (match) {\n                    _context18.next = 4;\n                    break;\n                  }\n                  return _context18.abrupt(\"return\", \"continue\");\n                case 4:\n                  currentMatch = currentMatches.find(function (m) {\n                    return m.route.id === match.route.id;\n                  });\n                  isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n                  if (!(isDeferredResult(result) && (isFetcher || isRevalidatingLoader))) {\n                    _context18.next = 11;\n                    break;\n                  }\n                  // Note: we do not have to touch activeDeferreds here since we race them\n                  // against the signal in resolveDeferredData and they'll get aborted\n                  // there if needed\n                  signal = signals[index];\n                  invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n                  _context18.next = 11;\n                  return resolveDeferredData(result, signal, isFetcher).then(function (result) {\n                    if (result) {\n                      results[index] = result || results[index];\n                    }\n                  });\n                case 11:\n                case \"end\":\n                  return _context18.stop();\n              }\n            }, _loop);\n          });\n          index = 0;\n        case 2:\n          if (!(index < results.length)) {\n            _context19.next = 10;\n            break;\n          }\n          return _context19.delegateYield(_loop(index), \"t0\", 4);\n        case 4:\n          _ret = _context19.t0;\n          if (!(_ret === \"continue\")) {\n            _context19.next = 7;\n            break;\n          }\n          return _context19.abrupt(\"continue\", 7);\n        case 7:\n          index++;\n          _context19.next = 2;\n          break;\n        case 10:\n        case \"end\":\n          return _context19.stop();\n      }\n    }, _callee17);\n  }));\n  return _resolveDeferredResults.apply(this, arguments);\n}\nfunction resolveDeferredData(_x79, _x80, _x81) {\n  return _resolveDeferredData.apply(this, arguments);\n}\nfunction _resolveDeferredData() {\n  _resolveDeferredData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(result, signal, unwrap) {\n    var aborted;\n    return _regeneratorRuntime().wrap(function _callee18$(_context20) {\n      while (1) switch (_context20.prev = _context20.next) {\n        case 0:\n          if (unwrap === void 0) {\n            unwrap = false;\n          }\n          _context20.next = 3;\n          return result.deferredData.resolveData(signal);\n        case 3:\n          aborted = _context20.sent;\n          if (!aborted) {\n            _context20.next = 6;\n            break;\n          }\n          return _context20.abrupt(\"return\");\n        case 6:\n          if (!unwrap) {\n            _context20.next = 14;\n            break;\n          }\n          _context20.prev = 7;\n          return _context20.abrupt(\"return\", {\n            type: ResultType.data,\n            data: result.deferredData.unwrappedData\n          });\n        case 11:\n          _context20.prev = 11;\n          _context20.t0 = _context20[\"catch\"](7);\n          return _context20.abrupt(\"return\", {\n            type: ResultType.error,\n            error: _context20.t0\n          });\n        case 14:\n          return _context20.abrupt(\"return\", {\n            type: ResultType.data,\n            data: result.deferredData.data\n          });\n        case 15:\n        case \"end\":\n          return _context20.stop();\n      }\n    }, _callee18, null, [[7, 11]]);\n  }));\n  return _resolveDeferredData.apply(this, arguments);\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(function (v) {\n    return v === \"\";\n  });\n}\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(match, loaderData) {\n  var route = match.route,\n    pathname = match.pathname,\n    params = match.params;\n  return {\n    id: route.id,\n    pathname: pathname,\n    params: params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction getTargetMatch(matches, location) {\n  var search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  var pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename };","map":{"version":3,"names":["Action","PopStateEventType","createMemoryHistory","options","_options","_options$initialEntri","initialEntries","initialIndex","_options$v5Compat","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","_window$location","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","_parsePath","substr","_parsePath$pathname","_parsePath$search","_parsePath$hash","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","invariant","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_extends","_ref","_ref$pathname","_ref$search","_ref$hash","parsedPath","searchIndex","getLocation","validateLocation","_options2","_options2$window","defaultView","_options2$v5Compat","getIndex","replaceState","handlePop","historyState","pushState","error","DOMException","name","assign","origin","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","concat","_toConsumableArray","id","join","children","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","score","computeScore","forEach","_route$path","includes","_iterator","_createForOfIteratorHelper","explodeOptionalSegments","_step","s","done","exploded","err","f","segments","split","_segments","_toArray","first","rest","isOptional","endsWith","required","restExploded","result","apply","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","originalPath","prefix","array","isLastSegment","star","starParam","keyMatch","_keyMatch","_slicedToArray","optional","param","pattern","_compilePath","compilePath","_compilePath2","matcher","paramNames","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","_","RegExp","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","_ref3","toPathname","_ref3$search","_ref3$hash","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","has","set","Response","AbortedDeferredError","_Error","_inherits","_super","_createSuper","_classCallCheck","arguments","_createClass","_wrapNativeSuper","DeferredData","_this","pendingKeysSet","subscribers","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","_ref4","_defineProperty","trackPromise","_this2","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","emit","settledKey","subscriber","subscribe","_this3","cancel","_this4","abort","v","k","_resolveData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this5","wrap","_callee$","_context","prev","next","resolve","sent","abrupt","stop","resolveData","_x","size","_ref2","_ref5","unwrapTrackedPromise","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","createRouter","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","dataRoutes","inFlightDataRoutes","future","v7_normalizeFormMethod","v7_prependBasename","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","_getShortCircuitMatch","getShortCircuitMatches","initialized","m","lazy","loader","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","blockers","pendingAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","updateBlocker","deleteBlocker","updateState","startNavigation","dispose","clear","deleteFetcher","newState","completeNavigation","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","_iterator2","_step2","_step2$value","getSavedScrollPosition","navigate","_x2","_x3","_navigate","_callee2","opts","normalizedPath","_normalizeNavigateOpt2","submission","userReplace","_callee2$","_context2","normalizeTo","fromRouteId","relative","normalizeNavigateOptions","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","_x4","_x5","_x6","_startNavigation","_callee3","routesToUse","loadingNavigation","_getShortCircuitMatch2","notFoundMatches","_route","request","pendingActionData","actionOutput","_yield$handleLoaders","shortCircuited","_callee3$","_context3","saveScrollPosition","cancelActiveDeferreds","isHashChangeOnly","createClientSideRequest","findNearestBoundary","handleAction","pendingActionError","Request","handleLoaders","fetcherSubmission","_x7","_x8","_x9","_x10","_x11","_handleAction","_callee4","actionMatch","boundaryMatch","_callee4$","_context4","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","isDeferredResult","_x12","_x13","_x14","_x15","_x16","_x17","_x18","_x19","_x20","_handleLoaders","_callee5","activeSubmission","_getMatchesToLoad","_getMatchesToLoad2","matchesToLoad","revalidatingFetchers","_updatedFetchers","abortPendingFetchRevalidations","_yield$callLoadersAnd","results","loaderResults","fetcherResults","_processLoaderData","updatedFetchers","didAbortFetchLoads","shouldUpdateFetchers","_callee5$","_context5","getMatchesToLoad","markFetchRedirectsDone","rf","fetcher","revalidatingFetcher","abortFetcher","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","abortStaleFetchLoads","getFetcher","fetch","setFetcherError","_normalizeNavigateOpt","handleFetcherAction","handleFetcherLoader","_x21","_x22","_x23","_x24","_x25","_x26","_handleFetcherAction","_callee6","requestMatches","_error2","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","_getMatchesToLoad3","_getMatchesToLoad4","_yield$callLoadersAnd2","_processLoaderData2","doneFetcher","_callee6$","_context6","isFetchActionRedirect","staleKey","_x27","_x28","_x29","_x30","_x31","_x32","_handleFetcherLoader","_callee7","_callee7$","_context7","resolveDeferredData","t0","_x33","_x34","_x35","_startRedirectNavigation","_callee8","_temp","_ref6","redirectLocation","isDifferentBasename","redirectHistoryAction","_state$navigation","_callee8$","_context8","_isFetchActionRedirect","_x36","_x37","_x38","_x39","_x40","_callLoadersAndMaybeResolveData","_callee9","currentMatches","fetchersToLoad","_callee9$","_context9","all","resolveDeferredResults","_cancelledDeferredRou","markFetchersDone","_iterator3","_step3","doneKeys","_iterator4","_step4","landedId","yeetedKeys","_iterator5","_step5","_step5$value","getBlocker","blocker","newBlocker","_entries","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalSetRoutes","newRoutes","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","createStaticHandler","query","_x41","_x42","_query","_callee10","_temp2","_ref7","requestContext","_getShortCircuitMatch3","methodNotAllowedMatches","_error4","_getShortCircuitMatch4","_route2","_callee10$","_context10","isValidMethod","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_x43","_x44","_queryRoute","_callee11","_temp3","_ref8","_result$activeDeferre","_callee11$","_context11","find","values","_x45","_x46","_x47","_x48","_x49","_queryImpl","_callee12","routeMatch","_result","_callee12$","_context12","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","response","_x50","_x51","_x52","_x53","_x54","_submit","_callee13","isRouteRequest","_error5","_context13","loaderRequest","context","_callee13$","_context14","Location","_x55","_x56","_x57","_x58","_x59","_loadRouteData","_callee14","executedLoaders","_callee14$","_context15","getLoaderMatchesUntilBoundary","processRouteLoaderData","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isSubmissionNavigation","prependBasename","contextualMatches","activeRouteMatch","_iterator6","_step6","hasNakedIndexQuery","normalizeFormMethod","isFetcher","toUpperCase","stripHashFromPath","searchParams","convertFormDataToSearchParams","append","boundaryId","boundaryMatches","findIndex","currentUrl","nextUrl","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","loadLazyRouteModule","_x60","_x61","_x62","_loadLazyRouteModule","_callee15","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","_callee15$","_context16","_x63","_x64","_x65","_x66","_x67","_x68","_x69","_x70","_x71","_x72","_callLoaderOrAction","_callee16","isStaticRequest","resultType","onReject","runHandler","handler","_url","_pathname","_url2","isSameBasename","contentType","_result$init","_result$init2","_callee16$","_context17","finish","protocol","text","isDeferredData","deferred","body","URLSearchParams","_iterator7","_step7","_step7$value","File","foundError","_processRouteLoaderDa","_revalidatingFetchers","newLoaderData","mergedLoaderData","_iterator8","_step8","hasOwnProperty","eligibleMatches","reverse","_temp4","_ref11","errorMessage","obj","_x73","_x74","_x75","_x76","_x77","_x78","_resolveDeferredResults","_callee17","signals","_loop","_ret","_callee17$","_context19","isRevalidatingLoader","_loop$","_context18","delegateYield","_x79","_x80","_x81","_resolveDeferredData","_callee18","unwrap","_callee18$","_context20","unwrappedData","getAll","handle","pathMatches"],"sources":["C:\\wamp64\\www\\BloodHub\\client\\node_modules\\@remix-run\\router\\history.ts","C:\\wamp64\\www\\BloodHub\\client\\node_modules\\@remix-run\\router\\utils.ts","C:\\wamp64\\www\\BloodHub\\client\\node_modules\\@remix-run\\router\\router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { warning, invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on <Form>,\n * useSubmit(), <fetcher.Form>, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: FormMethod | V7_FormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<DataFunctionValue> | DataFunctionValue;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<DataFunctionValue> | DataFunctionValue;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<Omit<R, ImmutableRouteKey>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        const starParam = params[star];\n\n        // Apply the splat\n        return starParam;\n      }\n\n      const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n\n        if (optional === \"?\") {\n          return param == null ? \"\" : param;\n        }\n\n        if (param == null) {\n          invariant(false, `Missing \":${key}\" param`);\n        }\n\n        return param;\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  DataResult,\n  DeferredData,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  DetectErrorBoundaryFunction,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  ShouldRevalidateFunction,\n  RouteManifest,\n  ImmutableRouteKey,\n  ActionFunction,\n  LoaderFunction,\n  V7_MutationFormMethod,\n  V7_FormMethod,\n  HTMLFormMethod,\n  MutationFormMethod,\n  MapRoutePropertiesFunction,\n} from \"./utils\";\nimport {\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_normalizeFormMethod: boolean;\n  v7_prependBasename: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\ntype BaseNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  fromRouteId?: string;\n};\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | V7_FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod | V7_FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | V7_FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod | V7_FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_normalizeFormMethod: false,\n    v7_prependBasename: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    !initialMatches.some((m) => m.route.lazy) &&\n    // And we have to either have no loaders or have been provided hydrationData\n    (!initialMatches.some((m) => m.route.loader) || init.hydrationData != null);\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              deleteBlocker(blockerKey!);\n              updateState({ blockers: new Map(router.state.blockers) });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    updateState({\n      ...newState, // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(\n        location,\n        newState.matches || state.matches\n      ),\n      preventScrollReset,\n      blockers: new Map(state.blockers),\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          deleteBlocker(blockerKey!);\n          updateState({ blockers: new Map(state.blockers) });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        ...submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission || fetcherSubmission\n        ? submission || fetcherSubmission\n        : loadingNavigation.formMethod &&\n          loadingNavigation.formAction &&\n          loadingNavigation.formData &&\n          loadingNavigation.formEncType\n        ? {\n            formMethod: loadingNavigation.formMethod,\n            formAction: loadingNavigation.formAction,\n            formData: loadingNavigation.formData,\n            formEncType: loadingNavigation.formEncType,\n          }\n        : undefined;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      routesToUse,\n      basename,\n      pendingActionData,\n      pendingError\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, {\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        ...(pendingActionData ? { actionData: pendingActionData } : {}),\n        ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState({\n        navigation: loadingNavigation,\n        ...(actionData\n          ? Object.keys(actionData).length === 0\n            ? { actionData: null }\n            : { actionData }\n          : {}),\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach((rf) => {\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      manifest,\n      mapRouteProperties,\n      basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult, {\n        submission,\n        isFetchActionRedirect: true,\n      });\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      routesToUse,\n      basename,\n      { [match.route.id]: actionResult.data },\n      undefined // No need to send through errors since we short circuit above\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: actionResult.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      manifest,\n      mapRouteProperties,\n      basename\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      fetchRedirectIds.add(key);\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      replace,\n      isFetchActionRedirect,\n    }: {\n      submission?: Submission;\n      replace?: boolean;\n      isFetchActionRedirect?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(\n      state.location,\n      redirect.location,\n      // TODO: This can be removed once we get rid of useTransition in Remix v2\n      {\n        _isRedirect: true,\n        ...(isFetchActionRedirect ? { _isFetchActionRedirect: true } : {}),\n      }\n    );\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n    // Check if this an absolute external redirect that goes to a new origin\n    if (ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser) {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename = stripBasename(url.pathname, basename) == null;\n\n      if (routerWindow.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData,\n      };\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      submission &&\n      isMutationMethod(submission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...submission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else if (isFetchActionRedirect) {\n      // For a fetch action redirect, we kick off a new loading navigation\n      // without the fetcher submission, but we send it along for shouldRevalidate\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        },\n        fetcherSubmission: submission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename\n        )\n      ),\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match && f.controller) {\n          return callLoaderOrAction(\n            \"loader\",\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            f.match,\n            f.matches,\n            manifest,\n            mapRouteProperties,\n            basename\n          );\n        } else {\n          let error: ErrorResult = {\n            type: ResultType.error,\n            error: getInternalRouterError(404, { pathname: f.path }),\n          };\n          return error;\n        }\n      }),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        loaderResults.map(() => request.signal),\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        fetchersToLoad.map((f) => (f.controller ? f.controller.signal : null)),\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    state.blockers.set(key, newBlocker);\n    updateState({ blockers: new Map(state.blockers) });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename,\n        true,\n        isRouteRequest,\n        requestContext\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename,\n          true,\n          isRouteRequest,\n          requestContext\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId != null && relative !== \"path\") {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route.  When using relative:path,\n    // fromRouteId is ignored since that is always relative to the current\n    // location path\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getPathContributingMatches(contextualMatches).map((m) => m.pathnameBase),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: RouterNavigateOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  let submission: Submission | undefined;\n  if (opts.formData) {\n    let formMethod = opts.formMethod || \"get\";\n    submission = {\n      formMethod: normalizeFormMethod\n        ? (formMethod.toUpperCase() as V7_FormMethod)\n        : (formMethod.toLowerCase() as FormMethod),\n      formAction: stripHashFromPath(path),\n      formEncType:\n        (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n      formData: opts.formData,\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return { path, submission };\n    }\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionData?: RouteData,\n  pendingError?: RouteData\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n        isRevalidationRequired ||\n        // Clicked the same link, resubmitted a GET form\n        currentUrl.pathname + currentUrl.search ===\n          nextUrl.pathname + nextUrl.search ||\n        // Search params affect all loaders\n        currentUrl.search !== nextUrl.search ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some((m) => m.route.id === f.routeId)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // hit a static href, so they _always_ check shouldRevalidate and the\n    // default is strictly if a revalidation is explicitly required (action\n    // submissions, useRevalidator, X-Remix-Revalidate).\n    let shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n      currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl,\n      nextParams: matches[matches.length - 1].params,\n      ...submission,\n      actionResult,\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      defaultShouldRevalidate: isRevalidationRequired,\n    });\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: Parameters<ShouldRevalidateFunction>[0]\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  basename: string,\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false,\n  requestContext?: unknown\n): Promise<DataResult> {\n  let resultType;\n  let result;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (handler: ActionFunction | LoaderFunction) => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    let abortPromise = new Promise((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([\n      handler({ request, params: match.params, context: requestContext }),\n      abortPromise,\n    ]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let values = await Promise.all([\n          runHandler(handler),\n          loadLazyRouteModule(match.route, mapRouteProperties, manifest),\n        ]);\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, data: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(\n          new URL(request.url),\n          matches.slice(0, matches.indexOf(match) + 1),\n          basename,\n          true,\n          location\n        );\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType, formData } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match, controller } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signals: (AbortSignal | null)[],\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(\n        signal,\n        \"Expected an AbortSignal for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}